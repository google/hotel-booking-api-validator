// API v1 (May 23, 2019) interface declaration for Book on Google API

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.12.4
// source: v1.proto

package com_google_travel_booking_partners_googleapi_api

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// List of credit card types,
type CardType int32

const (
	CardType_AX CardType = 0 // American Express
	CardType_DC CardType = 1 // Diners Club
	CardType_DS CardType = 2 // Discover
	CardType_JC CardType = 3 // JCB
	CardType_MC CardType = 4 // Mastercard
	CardType_VI CardType = 5 // Visa
)

// Enum value maps for CardType.
var (
	CardType_name = map[int32]string{
		0: "AX",
		1: "DC",
		2: "DS",
		3: "JC",
		4: "MC",
		5: "VI",
	}
	CardType_value = map[string]int32{
		"AX": 0,
		"DC": 1,
		"DS": 2,
		"JC": 3,
		"MC": 4,
		"VI": 5,
	}
)

func (x CardType) Enum() *CardType {
	p := new(CardType)
	*p = x
	return p
}

func (x CardType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[0].Descriptor()
}

func (CardType) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[0]
}

func (x CardType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardType.Descriptor instead.
func (CardType) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{0}
}

// List of room amenity types
type RoomAmenityType int32

const (
	RoomAmenityType_UNKNOWN_ROOM_AMENITY_TYPE     RoomAmenityType = 0
	RoomAmenityType_ALARM_CLOCK                   RoomAmenityType = 1
	RoomAmenityType_CHARGING_BEDSIDE_TABLE        RoomAmenityType = 2
	RoomAmenityType_HYPOALLERGENIC_BEDDING        RoomAmenityType = 3
	RoomAmenityType_PILLOW                        RoomAmenityType = 4
	RoomAmenityType_SYNTHETIC_PILLOW              RoomAmenityType = 5
	RoomAmenityType_MEMORY_FOAM_PILLOW            RoomAmenityType = 6
	RoomAmenityType_FEATHER_PILLOW                RoomAmenityType = 7
	RoomAmenityType_ROLL_AWAY_BED                 RoomAmenityType = 8
	RoomAmenityType_CRIB                          RoomAmenityType = 9
	RoomAmenityType_KITCHEN                       RoomAmenityType = 10
	RoomAmenityType_REFRIGERATOR                  RoomAmenityType = 11
	RoomAmenityType_DISHWASHER                    RoomAmenityType = 12
	RoomAmenityType_STOVE                         RoomAmenityType = 13
	RoomAmenityType_OVEN                          RoomAmenityType = 14
	RoomAmenityType_COOKWARE                      RoomAmenityType = 15
	RoomAmenityType_SINK                          RoomAmenityType = 16
	RoomAmenityType_MICROWAVE                     RoomAmenityType = 17
	RoomAmenityType_TOASTER                       RoomAmenityType = 18
	RoomAmenityType_TOASTER_OVEN                  RoomAmenityType = 19
	RoomAmenityType_INDOOR_GRILL                  RoomAmenityType = 20
	RoomAmenityType_OUTDOOR_GRILL                 RoomAmenityType = 21
	RoomAmenityType_DISHES_AND_UTENSILS           RoomAmenityType = 22
	RoomAmenityType_COOKING_UTENSILS              RoomAmenityType = 23
	RoomAmenityType_CONDIMENTS                    RoomAmenityType = 24
	RoomAmenityType_PANTRY_STAPLES                RoomAmenityType = 25
	RoomAmenityType_MINIBAR                       RoomAmenityType = 26
	RoomAmenityType_SNACKBAR                      RoomAmenityType = 27
	RoomAmenityType_BOTTLE_WATER                  RoomAmenityType = 28
	RoomAmenityType_BOTTLE_WATER_FREE             RoomAmenityType = 29
	RoomAmenityType_COFFEE_MAKER                  RoomAmenityType = 30
	RoomAmenityType_KETTLE                        RoomAmenityType = 31
	RoomAmenityType_TEA_STATION                   RoomAmenityType = 32
	RoomAmenityType_PRIVATE_BATHROOM              RoomAmenityType = 33
	RoomAmenityType_TOILET                        RoomAmenityType = 34
	RoomAmenityType_BIDET                         RoomAmenityType = 35
	RoomAmenityType_SHOWER                        RoomAmenityType = 36
	RoomAmenityType_SHOWER_ACCESSIBLE             RoomAmenityType = 37
	RoomAmenityType_BATHTUB                       RoomAmenityType = 38
	RoomAmenityType_HAIRDRYER                     RoomAmenityType = 39
	RoomAmenityType_BATHROBE                      RoomAmenityType = 40
	RoomAmenityType_PRIVATE_INDOOR_HOT_TUB        RoomAmenityType = 41
	RoomAmenityType_PRIVATE_OUTDOOR_HOT_TUB       RoomAmenityType = 42
	RoomAmenityType_PRIVATE_POOL                  RoomAmenityType = 43
	RoomAmenityType_PRIVATE_SAUNA                 RoomAmenityType = 44
	RoomAmenityType_WASHER_DRYER                  RoomAmenityType = 45
	RoomAmenityType_IRONING_EQUIPMENT             RoomAmenityType = 46
	RoomAmenityType_UNIVERSAL_POWER_ADAPTERS      RoomAmenityType = 47
	RoomAmenityType_AIR_CONDITIONING              RoomAmenityType = 48
	RoomAmenityType_HEATING                       RoomAmenityType = 49
	RoomAmenityType_FIREPLACE                     RoomAmenityType = 50
	RoomAmenityType_TV                            RoomAmenityType = 51
	RoomAmenityType_TV_WITH_CASTING               RoomAmenityType = 52
	RoomAmenityType_TV_WITH_STREAMING             RoomAmenityType = 53
	RoomAmenityType_PAY_PER_VIEW_MOVIES           RoomAmenityType = 54
	RoomAmenityType_LARGE_SCREEN_TV               RoomAmenityType = 55
	RoomAmenityType_IN_ROOM_SAFE                  RoomAmenityType = 56
	RoomAmenityType_ELECTRONIC_ROOM_KEY           RoomAmenityType = 57
	RoomAmenityType_SECOND_LOCK_ON_GUEST_DOORS    RoomAmenityType = 58
	RoomAmenityType_SMOKE_DETECTOR_IN_GUEST_ROOMS RoomAmenityType = 59
	RoomAmenityType_FIRE_EXTINGUISHERS            RoomAmenityType = 60
	RoomAmenityType_EMERGENCY_EXIT_MAPS           RoomAmenityType = 61
	RoomAmenityType_STAIRS                        RoomAmenityType = 62
	RoomAmenityType_LOFT                          RoomAmenityType = 63
	RoomAmenityType_ACCESSIBLE_ROOM               RoomAmenityType = 64
	RoomAmenityType_ADA_COMPLIANT_ROOM            RoomAmenityType = 65
	RoomAmenityType_NON_SMOKING                   RoomAmenityType = 66
	RoomAmenityType_WINDOWS_THAT_OPEN             RoomAmenityType = 67
	RoomAmenityType_PATIO                         RoomAmenityType = 68
	RoomAmenityType_BALCONY                       RoomAmenityType = 69
)

// Enum value maps for RoomAmenityType.
var (
	RoomAmenityType_name = map[int32]string{
		0:  "UNKNOWN_ROOM_AMENITY_TYPE",
		1:  "ALARM_CLOCK",
		2:  "CHARGING_BEDSIDE_TABLE",
		3:  "HYPOALLERGENIC_BEDDING",
		4:  "PILLOW",
		5:  "SYNTHETIC_PILLOW",
		6:  "MEMORY_FOAM_PILLOW",
		7:  "FEATHER_PILLOW",
		8:  "ROLL_AWAY_BED",
		9:  "CRIB",
		10: "KITCHEN",
		11: "REFRIGERATOR",
		12: "DISHWASHER",
		13: "STOVE",
		14: "OVEN",
		15: "COOKWARE",
		16: "SINK",
		17: "MICROWAVE",
		18: "TOASTER",
		19: "TOASTER_OVEN",
		20: "INDOOR_GRILL",
		21: "OUTDOOR_GRILL",
		22: "DISHES_AND_UTENSILS",
		23: "COOKING_UTENSILS",
		24: "CONDIMENTS",
		25: "PANTRY_STAPLES",
		26: "MINIBAR",
		27: "SNACKBAR",
		28: "BOTTLE_WATER",
		29: "BOTTLE_WATER_FREE",
		30: "COFFEE_MAKER",
		31: "KETTLE",
		32: "TEA_STATION",
		33: "PRIVATE_BATHROOM",
		34: "TOILET",
		35: "BIDET",
		36: "SHOWER",
		37: "SHOWER_ACCESSIBLE",
		38: "BATHTUB",
		39: "HAIRDRYER",
		40: "BATHROBE",
		41: "PRIVATE_INDOOR_HOT_TUB",
		42: "PRIVATE_OUTDOOR_HOT_TUB",
		43: "PRIVATE_POOL",
		44: "PRIVATE_SAUNA",
		45: "WASHER_DRYER",
		46: "IRONING_EQUIPMENT",
		47: "UNIVERSAL_POWER_ADAPTERS",
		48: "AIR_CONDITIONING",
		49: "HEATING",
		50: "FIREPLACE",
		51: "TV",
		52: "TV_WITH_CASTING",
		53: "TV_WITH_STREAMING",
		54: "PAY_PER_VIEW_MOVIES",
		55: "LARGE_SCREEN_TV",
		56: "IN_ROOM_SAFE",
		57: "ELECTRONIC_ROOM_KEY",
		58: "SECOND_LOCK_ON_GUEST_DOORS",
		59: "SMOKE_DETECTOR_IN_GUEST_ROOMS",
		60: "FIRE_EXTINGUISHERS",
		61: "EMERGENCY_EXIT_MAPS",
		62: "STAIRS",
		63: "LOFT",
		64: "ACCESSIBLE_ROOM",
		65: "ADA_COMPLIANT_ROOM",
		66: "NON_SMOKING",
		67: "WINDOWS_THAT_OPEN",
		68: "PATIO",
		69: "BALCONY",
	}
	RoomAmenityType_value = map[string]int32{
		"UNKNOWN_ROOM_AMENITY_TYPE":     0,
		"ALARM_CLOCK":                   1,
		"CHARGING_BEDSIDE_TABLE":        2,
		"HYPOALLERGENIC_BEDDING":        3,
		"PILLOW":                        4,
		"SYNTHETIC_PILLOW":              5,
		"MEMORY_FOAM_PILLOW":            6,
		"FEATHER_PILLOW":                7,
		"ROLL_AWAY_BED":                 8,
		"CRIB":                          9,
		"KITCHEN":                       10,
		"REFRIGERATOR":                  11,
		"DISHWASHER":                    12,
		"STOVE":                         13,
		"OVEN":                          14,
		"COOKWARE":                      15,
		"SINK":                          16,
		"MICROWAVE":                     17,
		"TOASTER":                       18,
		"TOASTER_OVEN":                  19,
		"INDOOR_GRILL":                  20,
		"OUTDOOR_GRILL":                 21,
		"DISHES_AND_UTENSILS":           22,
		"COOKING_UTENSILS":              23,
		"CONDIMENTS":                    24,
		"PANTRY_STAPLES":                25,
		"MINIBAR":                       26,
		"SNACKBAR":                      27,
		"BOTTLE_WATER":                  28,
		"BOTTLE_WATER_FREE":             29,
		"COFFEE_MAKER":                  30,
		"KETTLE":                        31,
		"TEA_STATION":                   32,
		"PRIVATE_BATHROOM":              33,
		"TOILET":                        34,
		"BIDET":                         35,
		"SHOWER":                        36,
		"SHOWER_ACCESSIBLE":             37,
		"BATHTUB":                       38,
		"HAIRDRYER":                     39,
		"BATHROBE":                      40,
		"PRIVATE_INDOOR_HOT_TUB":        41,
		"PRIVATE_OUTDOOR_HOT_TUB":       42,
		"PRIVATE_POOL":                  43,
		"PRIVATE_SAUNA":                 44,
		"WASHER_DRYER":                  45,
		"IRONING_EQUIPMENT":             46,
		"UNIVERSAL_POWER_ADAPTERS":      47,
		"AIR_CONDITIONING":              48,
		"HEATING":                       49,
		"FIREPLACE":                     50,
		"TV":                            51,
		"TV_WITH_CASTING":               52,
		"TV_WITH_STREAMING":             53,
		"PAY_PER_VIEW_MOVIES":           54,
		"LARGE_SCREEN_TV":               55,
		"IN_ROOM_SAFE":                  56,
		"ELECTRONIC_ROOM_KEY":           57,
		"SECOND_LOCK_ON_GUEST_DOORS":    58,
		"SMOKE_DETECTOR_IN_GUEST_ROOMS": 59,
		"FIRE_EXTINGUISHERS":            60,
		"EMERGENCY_EXIT_MAPS":           61,
		"STAIRS":                        62,
		"LOFT":                          63,
		"ACCESSIBLE_ROOM":               64,
		"ADA_COMPLIANT_ROOM":            65,
		"NON_SMOKING":                   66,
		"WINDOWS_THAT_OPEN":             67,
		"PATIO":                         68,
		"BALCONY":                       69,
	}
)

func (x RoomAmenityType) Enum() *RoomAmenityType {
	p := new(RoomAmenityType)
	*p = x
	return p
}

func (x RoomAmenityType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomAmenityType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[1].Descriptor()
}

func (RoomAmenityType) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[1]
}

func (x RoomAmenityType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomAmenityType.Descriptor instead.
func (RoomAmenityType) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{1}
}

// List of available forms of guaranteeing a reservation.
type GuaranteeType int32

const (
	// The GuaranteeType is unknown.
	GuaranteeType_UNKNOWN_GUARANTEE_TYPE GuaranteeType = 0
	// The user provides a credit or debit card when booking the reservation.
	GuaranteeType_PAYMENT_CARD GuaranteeType = 1
	// Payment information is not required at the time of booking.
	GuaranteeType_NO_GUARANTEE GuaranteeType = 2
)

// Enum value maps for GuaranteeType.
var (
	GuaranteeType_name = map[int32]string{
		0: "UNKNOWN_GUARANTEE_TYPE",
		1: "PAYMENT_CARD",
		2: "NO_GUARANTEE",
	}
	GuaranteeType_value = map[string]int32{
		"UNKNOWN_GUARANTEE_TYPE": 0,
		"PAYMENT_CARD":           1,
		"NO_GUARANTEE":           2,
	}
)

func (x GuaranteeType) Enum() *GuaranteeType {
	p := new(GuaranteeType)
	*p = x
	return p
}

func (x GuaranteeType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GuaranteeType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[2].Descriptor()
}

func (GuaranteeType) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[2]
}

func (x GuaranteeType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GuaranteeType.Descriptor instead.
func (GuaranteeType) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{2}
}

type BookingAvailabilityRequest_DeviceType int32

const (
	BookingAvailabilityRequest_UNKNOWN_DEVICE_TYPE BookingAvailabilityRequest_DeviceType = 0
	BookingAvailabilityRequest_DESKTOP             BookingAvailabilityRequest_DeviceType = 1
	BookingAvailabilityRequest_MOBILE              BookingAvailabilityRequest_DeviceType = 2
	BookingAvailabilityRequest_TABLET              BookingAvailabilityRequest_DeviceType = 3
)

// Enum value maps for BookingAvailabilityRequest_DeviceType.
var (
	BookingAvailabilityRequest_DeviceType_name = map[int32]string{
		0: "UNKNOWN_DEVICE_TYPE",
		1: "DESKTOP",
		2: "MOBILE",
		3: "TABLET",
	}
	BookingAvailabilityRequest_DeviceType_value = map[string]int32{
		"UNKNOWN_DEVICE_TYPE": 0,
		"DESKTOP":             1,
		"MOBILE":              2,
		"TABLET":              3,
	}
)

func (x BookingAvailabilityRequest_DeviceType) Enum() *BookingAvailabilityRequest_DeviceType {
	p := new(BookingAvailabilityRequest_DeviceType)
	*p = x
	return p
}

func (x BookingAvailabilityRequest_DeviceType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingAvailabilityRequest_DeviceType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[3].Descriptor()
}

func (BookingAvailabilityRequest_DeviceType) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[3]
}

func (x BookingAvailabilityRequest_DeviceType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingAvailabilityRequest_DeviceType.Descriptor instead.
func (BookingAvailabilityRequest_DeviceType) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{0, 0}
}

type BookingSubmitResponse_Status int32

const (
	BookingSubmitResponse_SUCCESS BookingSubmitResponse_Status = 0
	BookingSubmitResponse_FAILURE BookingSubmitResponse_Status = 1
)

// Enum value maps for BookingSubmitResponse_Status.
var (
	BookingSubmitResponse_Status_name = map[int32]string{
		0: "SUCCESS",
		1: "FAILURE",
	}
	BookingSubmitResponse_Status_value = map[string]int32{
		"SUCCESS": 0,
		"FAILURE": 1,
	}
)

func (x BookingSubmitResponse_Status) Enum() *BookingSubmitResponse_Status {
	p := new(BookingSubmitResponse_Status)
	*p = x
	return p
}

func (x BookingSubmitResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BookingSubmitResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[4].Descriptor()
}

func (BookingSubmitResponse_Status) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[4]
}

func (x BookingSubmitResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BookingSubmitResponse_Status.Descriptor instead.
func (BookingSubmitResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{3, 0}
}

type AvailabilityError_AvailabilityErrorType int32

const (
	// Error type is unknown.
	AvailabilityError_UNKNOWN_ERROR AvailabilityError_AvailabilityErrorType = 0
	// API version specified in the request is not supported by the server.
	AvailabilityError_API_VERSION_UNSUPPORTED AvailabilityError_AvailabilityErrorType = 1
	// Specified dates are invalid or in the past.
	AvailabilityError_DATE_SELECTION_INVALID AvailabilityError_AvailabilityErrorType = 2
	// A hotel with the specified ID could not be found.
	AvailabilityError_HOTEL_NOT_FOUND AvailabilityError_AvailabilityErrorType = 3
	// Network error while communicating with a third-party system.
	AvailabilityError_NETWORK_ERROR AvailabilityError_AvailabilityErrorType = 4
	// Service is temporarily unavailable.
	AvailabilityError_RECOVERABLE_ERROR AvailabilityError_AvailabilityErrorType = 5
	// Request contains a field with data in an invalid format.
	AvailabilityError_REQUEST_DATA_INVALID AvailabilityError_AvailabilityErrorType = 6
	// Request is missing a required field.
	AvailabilityError_REQUEST_INCOMPLETE AvailabilityError_AvailabilityErrorType = 7
	// Request cannot be parsed other than a field containing data in an invalid
	// format or missing a required field.
	AvailabilityError_REQUEST_NOT_PARSABLE AvailabilityError_AvailabilityErrorType = 8
	// Error returned by a supplier system that does not fit into a recognized
	// error type.
	AvailabilityError_SUPPLIER_ERROR AvailabilityError_AvailabilityErrorType = 9
)

// Enum value maps for AvailabilityError_AvailabilityErrorType.
var (
	AvailabilityError_AvailabilityErrorType_name = map[int32]string{
		0: "UNKNOWN_ERROR",
		1: "API_VERSION_UNSUPPORTED",
		2: "DATE_SELECTION_INVALID",
		3: "HOTEL_NOT_FOUND",
		4: "NETWORK_ERROR",
		5: "RECOVERABLE_ERROR",
		6: "REQUEST_DATA_INVALID",
		7: "REQUEST_INCOMPLETE",
		8: "REQUEST_NOT_PARSABLE",
		9: "SUPPLIER_ERROR",
	}
	AvailabilityError_AvailabilityErrorType_value = map[string]int32{
		"UNKNOWN_ERROR":           0,
		"API_VERSION_UNSUPPORTED": 1,
		"DATE_SELECTION_INVALID":  2,
		"HOTEL_NOT_FOUND":         3,
		"NETWORK_ERROR":           4,
		"RECOVERABLE_ERROR":       5,
		"REQUEST_DATA_INVALID":    6,
		"REQUEST_INCOMPLETE":      7,
		"REQUEST_NOT_PARSABLE":    8,
		"SUPPLIER_ERROR":          9,
	}
)

func (x AvailabilityError_AvailabilityErrorType) Enum() *AvailabilityError_AvailabilityErrorType {
	p := new(AvailabilityError_AvailabilityErrorType)
	*p = x
	return p
}

func (x AvailabilityError_AvailabilityErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AvailabilityError_AvailabilityErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[5].Descriptor()
}

func (AvailabilityError_AvailabilityErrorType) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[5]
}

func (x AvailabilityError_AvailabilityErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AvailabilityError_AvailabilityErrorType.Descriptor instead.
func (AvailabilityError_AvailabilityErrorType) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{4, 0}
}

type CancellationPolicy_CancellationSummary int32

const (
	// Cancellation policy is unknown.
	CancellationPolicy_UNKNOWN_CANCELLATION_POLICY CancellationPolicy_CancellationSummary = 0
	// There is a period of time during which the reservation can be canceled
	// without penalty and full refund of any deposit.
	CancellationPolicy_FREE_CANCELLATION CancellationPolicy_CancellationSummary = 1
	// There is no period of time during which the reservation can be canceled
	// with a penalty less than the total amount paid, if there was a deposit,
	// or less than the total amount of the reservation, if there was no
	// deposit.
	CancellationPolicy_NON_REFUNDABLE CancellationPolicy_CancellationSummary = 2
	// There is no period of time during which the reservation can be canceled
	// without penalty, but there is a period of time during which it can be
	// canceled with a penalty less than the total amount paid, if there was a
	// deposit, or less than the total amount of the reservation, if there was
	// no deposit.
	CancellationPolicy_PARTIAL_REFUND CancellationPolicy_CancellationSummary = 3
)

// Enum value maps for CancellationPolicy_CancellationSummary.
var (
	CancellationPolicy_CancellationSummary_name = map[int32]string{
		0: "UNKNOWN_CANCELLATION_POLICY",
		1: "FREE_CANCELLATION",
		2: "NON_REFUNDABLE",
		3: "PARTIAL_REFUND",
	}
	CancellationPolicy_CancellationSummary_value = map[string]int32{
		"UNKNOWN_CANCELLATION_POLICY": 0,
		"FREE_CANCELLATION":           1,
		"NON_REFUNDABLE":              2,
		"PARTIAL_REFUND":              3,
	}
)

func (x CancellationPolicy_CancellationSummary) Enum() *CancellationPolicy_CancellationSummary {
	p := new(CancellationPolicy_CancellationSummary)
	*p = x
	return p
}

func (x CancellationPolicy_CancellationSummary) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CancellationPolicy_CancellationSummary) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[6].Descriptor()
}

func (CancellationPolicy_CancellationSummary) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[6]
}

func (x CancellationPolicy_CancellationSummary) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CancellationPolicy_CancellationSummary.Descriptor instead.
func (CancellationPolicy_CancellationSummary) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{7, 0}
}

type RoomRate_LineItem_LineItemType int32

const (
	// Base room rate.
	RoomRate_LineItem_BASE_RATE RoomRate_LineItem_LineItemType = 0
	// Taxes and/or fees that cannot be separated or are of an unknown type.
	RoomRate_LineItem_UNKNOWN_TAXES_AND_FEES RoomRate_LineItem_LineItemType = 1
	// Taxes that cannot be separated or of an unknown type.
	RoomRate_LineItem_UNKNOWN_TAXES RoomRate_LineItem_LineItemType = 2
	// Tax applied by a city or municipality, such as a sales or tourism tax.
	RoomRate_LineItem_TAX_MUNICIPAL RoomRate_LineItem_LineItemType = 3
	// VAT or GST.
	RoomRate_LineItem_TAX_VAT RoomRate_LineItem_LineItemType = 4
	// Tax that does not fall into another defined type.
	RoomRate_LineItem_TAX_OTHER RoomRate_LineItem_LineItemType = 5
	// Fees that cannot be separated or of an unknown type.
	RoomRate_LineItem_UNKNOWN_FEES RoomRate_LineItem_LineItemType = 6
	// Fee applied by the advertiser or booking partner.
	RoomRate_LineItem_FEE_BOOKING RoomRate_LineItem_LineItemType = 7
	// Fee applied by the hotel that does not fall into another defined type.
	RoomRate_LineItem_FEE_HOTEL RoomRate_LineItem_LineItemType = 8
	// Fee applied by the hotel for resort-type accommodations or other
	// amenities.
	RoomRate_LineItem_FEE_RESORT RoomRate_LineItem_LineItemType = 9
	// Fee applied by the hotel for transportation, such as transfers or
	// connections.
	RoomRate_LineItem_FEE_TRANSFER RoomRate_LineItem_LineItemType = 10
	// Fee that does not fall into another defined type.
	RoomRate_LineItem_FEE_OTHER RoomRate_LineItem_LineItemType = 11
)

// Enum value maps for RoomRate_LineItem_LineItemType.
var (
	RoomRate_LineItem_LineItemType_name = map[int32]string{
		0:  "BASE_RATE",
		1:  "UNKNOWN_TAXES_AND_FEES",
		2:  "UNKNOWN_TAXES",
		3:  "TAX_MUNICIPAL",
		4:  "TAX_VAT",
		5:  "TAX_OTHER",
		6:  "UNKNOWN_FEES",
		7:  "FEE_BOOKING",
		8:  "FEE_HOTEL",
		9:  "FEE_RESORT",
		10: "FEE_TRANSFER",
		11: "FEE_OTHER",
	}
	RoomRate_LineItem_LineItemType_value = map[string]int32{
		"BASE_RATE":              0,
		"UNKNOWN_TAXES_AND_FEES": 1,
		"UNKNOWN_TAXES":          2,
		"TAX_MUNICIPAL":          3,
		"TAX_VAT":                4,
		"TAX_OTHER":              5,
		"UNKNOWN_FEES":           6,
		"FEE_BOOKING":            7,
		"FEE_HOTEL":              8,
		"FEE_RESORT":             9,
		"FEE_TRANSFER":           10,
		"FEE_OTHER":              11,
	}
)

func (x RoomRate_LineItem_LineItemType) Enum() *RoomRate_LineItem_LineItemType {
	p := new(RoomRate_LineItem_LineItemType)
	*p = x
	return p
}

func (x RoomRate_LineItem_LineItemType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RoomRate_LineItem_LineItemType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[7].Descriptor()
}

func (RoomRate_LineItem_LineItemType) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[7]
}

func (x RoomRate_LineItem_LineItemType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RoomRate_LineItem_LineItemType.Descriptor instead.
func (RoomRate_LineItem_LineItemType) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{17, 0, 0}
}

type SubmitError_SubmitErrorType int32

const (
	// error type is unknown.
	SubmitError_UNKNOWN_ERROR SubmitError_SubmitErrorType = 0
	// API version specified in the request is not supported by the server.
	SubmitError_API_VERSION_UNSUPPORTED SubmitError_SubmitErrorType = 1
	// the partner or hotel cannot support this booking as it is too close to
	// the check-in date or time.
	SubmitError_CHECKIN_TOO_CLOSE SubmitError_SubmitErrorType = 2
	// the customer name is invalid.
	SubmitError_CUSTOMER_NAME_INVALID SubmitError_SubmitErrorType = 3
	// specified dates are invalid or in the past.
	SubmitError_DATE_SELECTION_INVALID SubmitError_SubmitErrorType = 4
	// the booking appears to be a duplicate of an existing reservation.
	SubmitError_DUPLICATE_BOOKING SubmitError_SubmitErrorType = 5
	// a hotel with the specified ID could not be found.
	SubmitError_HOTEL_NOT_FOUND SubmitError_SubmitErrorType = 6
	// network error while communicating with a third-party system.
	SubmitError_NETWORK_ERROR SubmitError_SubmitErrorType = 7
	// billing address invalid or missing information.
	SubmitError_PAYMENT_BILLING_ADDRESS_INVALID SubmitError_SubmitErrorType = 8
	// payment card cardholder name is invalid.
	SubmitError_PAYMENT_CARD_CARDHOLDER_NAME_INVALID SubmitError_SubmitErrorType = 9
	// payment card CVC is missing or invalid.
	SubmitError_PAYMENT_CARD_CVC_INVALID SubmitError_SubmitErrorType = 10
	// payment card expiration date is invalid or has expired.
	SubmitError_PAYMENT_CARD_EXPIRATION_INVALID SubmitError_SubmitErrorType = 11
	// payment card number is not valid for the card type.
	SubmitError_PAYMENT_CARD_NUMBER_INVALID SubmitError_SubmitErrorType = 12
	// payment card type is unrecognized or not supported for this reservation.
	SubmitError_PAYMENT_CARD_TYPE_NOT_SUPPORTED SubmitError_SubmitErrorType = 13
	// payment declined by the processor or by partner risk assessment.
	SubmitError_PAYMENT_DECLINED SubmitError_SubmitErrorType = 14
	// error processing the payment that does not fit into a recognized error
	// type.
	SubmitError_PAYMENT_INVALID SubmitError_SubmitErrorType = 15
	// payment does not have sufficient funds or credit to cover the
	// transaction.
	SubmitError_PAYMENT_INSUFFICIENT SubmitError_SubmitErrorType = 16
	// error returned by a payment processor that does not fit into a recognized
	// error type.
	SubmitError_PAYMENT_PROCESSOR_ERROR SubmitError_SubmitErrorType = 17
	// payment type is unrecognized or not accepted for this reservation.
	SubmitError_PAYMENT_TYPE_NOT_ACCEPTED SubmitError_SubmitErrorType = 18
	// rate plan code is unrecognized or not available.
	SubmitError_RATE_PLAN_UNAVAILABLE SubmitError_SubmitErrorType = 19
	// service is temporarily unavailable.
	SubmitError_RECOVERABLE_ERROR SubmitError_SubmitErrorType = 20
	// request contains a field with data in an invalid format.
	SubmitError_REQUEST_DATA_INVALID SubmitError_SubmitErrorType = 21
	// request is missing a required field.
	SubmitError_REQUEST_INCOMPLETE SubmitError_SubmitErrorType = 22
	// request cannot be parsed other than a field containing data in an invalid
	// format or missing a required field.
	SubmitError_REQUEST_NOT_PARSABLE SubmitError_SubmitErrorType = 23
	// room rate details are invalid or out of date other than pricing.
	SubmitError_ROOM_RATE_MISMATCH SubmitError_SubmitErrorType = 24
	// room rate pricing details are out of date.
	SubmitError_ROOM_RATE_PRICE_MISMATCH SubmitError_SubmitErrorType = 25
	// room rate code is unrecognized or not available.
	SubmitError_ROOM_RATE_UNAVAILABLE SubmitError_SubmitErrorType = 26
	// room type code is unrecognized or not available.
	SubmitError_ROOM_TYPE_UNAVAILABLE SubmitError_SubmitErrorType = 27
	// the traveler name is invalid.
	SubmitError_TRAVELER_NAME_INVALID SubmitError_SubmitErrorType = 28
	// error returned by a supplier system that does not fit into a recognized
	// error type.
	SubmitError_SUPPLIER_ERROR SubmitError_SubmitErrorType = 29
	// the loyalty identifier is invalid or required but missing.
	SubmitError_LOYALTY_IDENTIFIER_INVALID SubmitError_SubmitErrorType = 30
	// the loyalty identifier is found but the accompanying information, e.g.,
	// last name or email address, does not match records.
	SubmitError_LOYALTY_IDENTIFIER_MISMATCH SubmitError_SubmitErrorType = 31
	// error occurred during loyalty sign-up.
	SubmitError_LOYALTY_SIGNUP_FAILED SubmitError_SubmitErrorType = 32
)

// Enum value maps for SubmitError_SubmitErrorType.
var (
	SubmitError_SubmitErrorType_name = map[int32]string{
		0:  "UNKNOWN_ERROR",
		1:  "API_VERSION_UNSUPPORTED",
		2:  "CHECKIN_TOO_CLOSE",
		3:  "CUSTOMER_NAME_INVALID",
		4:  "DATE_SELECTION_INVALID",
		5:  "DUPLICATE_BOOKING",
		6:  "HOTEL_NOT_FOUND",
		7:  "NETWORK_ERROR",
		8:  "PAYMENT_BILLING_ADDRESS_INVALID",
		9:  "PAYMENT_CARD_CARDHOLDER_NAME_INVALID",
		10: "PAYMENT_CARD_CVC_INVALID",
		11: "PAYMENT_CARD_EXPIRATION_INVALID",
		12: "PAYMENT_CARD_NUMBER_INVALID",
		13: "PAYMENT_CARD_TYPE_NOT_SUPPORTED",
		14: "PAYMENT_DECLINED",
		15: "PAYMENT_INVALID",
		16: "PAYMENT_INSUFFICIENT",
		17: "PAYMENT_PROCESSOR_ERROR",
		18: "PAYMENT_TYPE_NOT_ACCEPTED",
		19: "RATE_PLAN_UNAVAILABLE",
		20: "RECOVERABLE_ERROR",
		21: "REQUEST_DATA_INVALID",
		22: "REQUEST_INCOMPLETE",
		23: "REQUEST_NOT_PARSABLE",
		24: "ROOM_RATE_MISMATCH",
		25: "ROOM_RATE_PRICE_MISMATCH",
		26: "ROOM_RATE_UNAVAILABLE",
		27: "ROOM_TYPE_UNAVAILABLE",
		28: "TRAVELER_NAME_INVALID",
		29: "SUPPLIER_ERROR",
		30: "LOYALTY_IDENTIFIER_INVALID",
		31: "LOYALTY_IDENTIFIER_MISMATCH",
		32: "LOYALTY_SIGNUP_FAILED",
	}
	SubmitError_SubmitErrorType_value = map[string]int32{
		"UNKNOWN_ERROR":                        0,
		"API_VERSION_UNSUPPORTED":              1,
		"CHECKIN_TOO_CLOSE":                    2,
		"CUSTOMER_NAME_INVALID":                3,
		"DATE_SELECTION_INVALID":               4,
		"DUPLICATE_BOOKING":                    5,
		"HOTEL_NOT_FOUND":                      6,
		"NETWORK_ERROR":                        7,
		"PAYMENT_BILLING_ADDRESS_INVALID":      8,
		"PAYMENT_CARD_CARDHOLDER_NAME_INVALID": 9,
		"PAYMENT_CARD_CVC_INVALID":             10,
		"PAYMENT_CARD_EXPIRATION_INVALID":      11,
		"PAYMENT_CARD_NUMBER_INVALID":          12,
		"PAYMENT_CARD_TYPE_NOT_SUPPORTED":      13,
		"PAYMENT_DECLINED":                     14,
		"PAYMENT_INVALID":                      15,
		"PAYMENT_INSUFFICIENT":                 16,
		"PAYMENT_PROCESSOR_ERROR":              17,
		"PAYMENT_TYPE_NOT_ACCEPTED":            18,
		"RATE_PLAN_UNAVAILABLE":                19,
		"RECOVERABLE_ERROR":                    20,
		"REQUEST_DATA_INVALID":                 21,
		"REQUEST_INCOMPLETE":                   22,
		"REQUEST_NOT_PARSABLE":                 23,
		"ROOM_RATE_MISMATCH":                   24,
		"ROOM_RATE_PRICE_MISMATCH":             25,
		"ROOM_RATE_UNAVAILABLE":                26,
		"ROOM_TYPE_UNAVAILABLE":                27,
		"TRAVELER_NAME_INVALID":                28,
		"SUPPLIER_ERROR":                       29,
		"LOYALTY_IDENTIFIER_INVALID":           30,
		"LOYALTY_IDENTIFIER_MISMATCH":          31,
		"LOYALTY_SIGNUP_FAILED":                32,
	}
)

func (x SubmitError_SubmitErrorType) Enum() *SubmitError_SubmitErrorType {
	p := new(SubmitError_SubmitErrorType)
	*p = x
	return p
}

func (x SubmitError_SubmitErrorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SubmitError_SubmitErrorType) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_proto_enumTypes[8].Descriptor()
}

func (SubmitError_SubmitErrorType) Type() protoreflect.EnumType {
	return &file_v1_proto_enumTypes[8]
}

func (x SubmitError_SubmitErrorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SubmitError_SubmitErrorType.Descriptor instead.
func (SubmitError_SubmitErrorType) EnumDescriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{19, 0}
}

// Request to check availability for the given search criteria.
type BookingAvailabilityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version number of the api spec used. (required)
	ApiVersion int32 `protobuf:"varint,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Unique ID for the request. (required)
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Tracking parameters. (optional)
	Tracking *Tracking `protobuf:"bytes,3,opt,name=tracking,proto3" json:"tracking,omitempty"`
	// Partner hotel ID. (required)
	HotelId string `protobuf:"bytes,4,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	// Check-in date (format YYYY-MM-DD). (required)
	StartDate string `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Check-out date (format YYYY-MM-DD). (required)
	EndDate string `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Number of adult guests and children by age in years for a single room.
	// (required)
	Party *Occupancy `protobuf:"bytes,7,opt,name=party,proto3" json:"party,omitempty"`
	// The BCP-47 language tag identifying the language expected in the response.
	// (required)
	Language string `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	// ISO 4217 currency code for the currency expected in the response.
	// (required)
	Currency string `protobuf:"bytes,9,opt,name=currency,proto3" json:"currency,omitempty"`
	// The ISO 3166 country code identified by the originating user request.
	// (optional)
	UserCountry string `protobuf:"bytes,10,opt,name=user_country,json=userCountry,proto3" json:"user_country,omitempty"`
	// DeviceType used to issue the request. (optional)
	DeviceType BookingAvailabilityRequest_DeviceType `protobuf:"varint,11,opt,name=device_type,json=deviceType,proto3,enum=ext.travel.booking.partner.v1.BookingAvailabilityRequest_DeviceType" json:"device_type,omitempty"`
}

func (x *BookingAvailabilityRequest) Reset() {
	*x = BookingAvailabilityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingAvailabilityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingAvailabilityRequest) ProtoMessage() {}

func (x *BookingAvailabilityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingAvailabilityRequest.ProtoReflect.Descriptor instead.
func (*BookingAvailabilityRequest) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{0}
}

func (x *BookingAvailabilityRequest) GetApiVersion() int32 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

func (x *BookingAvailabilityRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BookingAvailabilityRequest) GetTracking() *Tracking {
	if x != nil {
		return x.Tracking
	}
	return nil
}

func (x *BookingAvailabilityRequest) GetHotelId() string {
	if x != nil {
		return x.HotelId
	}
	return ""
}

func (x *BookingAvailabilityRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *BookingAvailabilityRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *BookingAvailabilityRequest) GetParty() *Occupancy {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *BookingAvailabilityRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *BookingAvailabilityRequest) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

func (x *BookingAvailabilityRequest) GetUserCountry() string {
	if x != nil {
		return x.UserCountry
	}
	return ""
}

func (x *BookingAvailabilityRequest) GetDeviceType() BookingAvailabilityRequest_DeviceType {
	if x != nil {
		return x.DeviceType
	}
	return BookingAvailabilityRequest_UNKNOWN_DEVICE_TYPE
}

// Response with hotel availability for the given search criteria.
type BookingAvailabilityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version of the api spec used, ex 1. (required)
	ApiVersion int32 `protobuf:"varint,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Echo unique ID for the request. (required)
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Echo partner hotel ID. (required)
	HotelId string `protobuf:"bytes,3,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	// Echo check-in date (format YYYY-MM-DD). (required)
	StartDate string `protobuf:"bytes,4,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Echo check-out date (format YYYY-MM-DD). (required)
	EndDate string `protobuf:"bytes,5,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Echo number of adult guests and children by age in years. (required)
	Party *Occupancy `protobuf:"bytes,6,opt,name=party,proto3" json:"party,omitempty"`
	// The list of room types that match the search criteria. (required)
	RoomTypes []*RoomType `protobuf:"bytes,7,rep,name=room_types,json=roomTypes,proto3" json:"room_types,omitempty"`
	// The list of rate plans that match the search criteria. (required)
	RatePlans []*RatePlan `protobuf:"bytes,8,rep,name=rate_plans,json=ratePlans,proto3" json:"rate_plans,omitempty"`
	// The list of room rates that match the search criteria; (required)
	RoomRates []*RoomRate `protobuf:"bytes,9,rep,name=room_rates,json=roomRates,proto3" json:"room_rates,omitempty"`
	// The hotel details. (required, unless error)
	HotelDetails *HotelDetails `protobuf:"bytes,10,opt,name=hotel_details,json=hotelDetails,proto3" json:"hotel_details,omitempty"`
	// Partner policy details. (optional)
	Policies *PartnerPolicies `protobuf:"bytes,11,opt,name=policies,proto3" json:"policies,omitempty"`
	// Error details if the request was not successful. (optional)
	Error *AvailabilityError `protobuf:"bytes,12,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BookingAvailabilityResponse) Reset() {
	*x = BookingAvailabilityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingAvailabilityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingAvailabilityResponse) ProtoMessage() {}

func (x *BookingAvailabilityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingAvailabilityResponse.ProtoReflect.Descriptor instead.
func (*BookingAvailabilityResponse) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{1}
}

func (x *BookingAvailabilityResponse) GetApiVersion() int32 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

func (x *BookingAvailabilityResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BookingAvailabilityResponse) GetHotelId() string {
	if x != nil {
		return x.HotelId
	}
	return ""
}

func (x *BookingAvailabilityResponse) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *BookingAvailabilityResponse) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *BookingAvailabilityResponse) GetParty() *Occupancy {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *BookingAvailabilityResponse) GetRoomTypes() []*RoomType {
	if x != nil {
		return x.RoomTypes
	}
	return nil
}

func (x *BookingAvailabilityResponse) GetRatePlans() []*RatePlan {
	if x != nil {
		return x.RatePlans
	}
	return nil
}

func (x *BookingAvailabilityResponse) GetRoomRates() []*RoomRate {
	if x != nil {
		return x.RoomRates
	}
	return nil
}

func (x *BookingAvailabilityResponse) GetHotelDetails() *HotelDetails {
	if x != nil {
		return x.HotelDetails
	}
	return nil
}

func (x *BookingAvailabilityResponse) GetPolicies() *PartnerPolicies {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *BookingAvailabilityResponse) GetError() *AvailabilityError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Request to book a reservation for given criteria.
type BookingSubmitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version number of the api spec used. (required)
	ApiVersion int32 `protobuf:"varint,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Unique ID for the request. (required)
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Tracking parameters. (optional)
	Tracking *Tracking `protobuf:"bytes,3,opt,name=tracking,proto3" json:"tracking,omitempty"`
	// Partner hotel ID. (required)
	HotelId string `protobuf:"bytes,4,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	// Check-in date (format YYYY-MM-DD). (required)
	StartDate string `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Check-out date (format YYYY-MM-DD). (required)
	EndDate string `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Booking customer's ip addrss. (required)
	IpAddress string `protobuf:"bytes,7,opt,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
	// The BCP-47 language tag identifying the customer's preferred language
	// (required)
	Language string `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty"`
	// Customer details. (required)
	Customer *Customer `protobuf:"bytes,9,opt,name=customer,proto3" json:"customer,omitempty"`
	// Primary traveler details along with party details. (required)
	Traveler *Traveler `protobuf:"bytes,10,opt,name=traveler,proto3" json:"traveler,omitempty"`
	// Room rate details. (required)
	RoomRate *RoomRate `protobuf:"bytes,11,opt,name=room_rate,json=roomRate,proto3" json:"room_rate,omitempty"`
	// Payment details. (required)
	Payment *BookingSubmitRequest_Payment `protobuf:"bytes,12,opt,name=payment,proto3" json:"payment,omitempty"`
}

func (x *BookingSubmitRequest) Reset() {
	*x = BookingSubmitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingSubmitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSubmitRequest) ProtoMessage() {}

func (x *BookingSubmitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSubmitRequest.ProtoReflect.Descriptor instead.
func (*BookingSubmitRequest) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{2}
}

func (x *BookingSubmitRequest) GetApiVersion() int32 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

func (x *BookingSubmitRequest) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BookingSubmitRequest) GetTracking() *Tracking {
	if x != nil {
		return x.Tracking
	}
	return nil
}

func (x *BookingSubmitRequest) GetHotelId() string {
	if x != nil {
		return x.HotelId
	}
	return ""
}

func (x *BookingSubmitRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *BookingSubmitRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *BookingSubmitRequest) GetIpAddress() string {
	if x != nil {
		return x.IpAddress
	}
	return ""
}

func (x *BookingSubmitRequest) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

func (x *BookingSubmitRequest) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *BookingSubmitRequest) GetTraveler() *Traveler {
	if x != nil {
		return x.Traveler
	}
	return nil
}

func (x *BookingSubmitRequest) GetRoomRate() *RoomRate {
	if x != nil {
		return x.RoomRate
	}
	return nil
}

func (x *BookingSubmitRequest) GetPayment() *BookingSubmitRequest_Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

// Response confirming the booking reservation or rejection details.
type BookingSubmitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The version number of the api spec used. (required)
	ApiVersion int32 `protobuf:"varint,1,opt,name=api_version,json=apiVersion,proto3" json:"api_version,omitempty"`
	// Unique ID for the request. (required)
	TransactionId string `protobuf:"bytes,2,opt,name=transaction_id,json=transactionId,proto3" json:"transaction_id,omitempty"`
	// Success or failure status of the booking request. (reqiured)
	Status BookingSubmitResponse_Status `protobuf:"varint,3,opt,name=status,proto3,enum=ext.travel.booking.partner.v1.BookingSubmitResponse_Status" json:"status,omitempty"`
	// Reservation details. (required)
	Reservation *BookingSubmitResponse_Reservation `protobuf:"bytes,4,opt,name=reservation,proto3" json:"reservation,omitempty"`
	// Error details. (optional)
	Error *SubmitError `protobuf:"bytes,5,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *BookingSubmitResponse) Reset() {
	*x = BookingSubmitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingSubmitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSubmitResponse) ProtoMessage() {}

func (x *BookingSubmitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSubmitResponse.ProtoReflect.Descriptor instead.
func (*BookingSubmitResponse) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{3}
}

func (x *BookingSubmitResponse) GetApiVersion() int32 {
	if x != nil {
		return x.ApiVersion
	}
	return 0
}

func (x *BookingSubmitResponse) GetTransactionId() string {
	if x != nil {
		return x.TransactionId
	}
	return ""
}

func (x *BookingSubmitResponse) GetStatus() BookingSubmitResponse_Status {
	if x != nil {
		return x.Status
	}
	return BookingSubmitResponse_SUCCESS
}

func (x *BookingSubmitResponse) GetReservation() *BookingSubmitResponse_Reservation {
	if x != nil {
		return x.Reservation
	}
	return nil
}

func (x *BookingSubmitResponse) GetError() *SubmitError {
	if x != nil {
		return x.Error
	}
	return nil
}

// Availability response error details.
type AvailabilityError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type of availability error that was returned. (required)
	Type AvailabilityError_AvailabilityErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=ext.travel.booking.partner.v1.AvailabilityError_AvailabilityErrorType" json:"type,omitempty"`
	// Detailed description of the error for debugging purposes. (required)
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *AvailabilityError) Reset() {
	*x = AvailabilityError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AvailabilityError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AvailabilityError) ProtoMessage() {}

func (x *AvailabilityError) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AvailabilityError.ProtoReflect.Descriptor instead.
func (*AvailabilityError) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{4}
}

func (x *AvailabilityError) GetType() AvailabilityError_AvailabilityErrorType {
	if x != nil {
		return x.Type
	}
	return AvailabilityError_UNKNOWN_ERROR
}

func (x *AvailabilityError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Address definition.
type Address struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Primary street address. (required)
	Address1 string `protobuf:"bytes,1,opt,name=address1,proto3" json:"address1,omitempty"`
	// Secondary street address, if needed. (optional)
	Address2 string `protobuf:"bytes,2,opt,name=address2,proto3" json:"address2,omitempty"`
	// Third portion of the street address, if necessary. (optional)
	Address3 string `protobuf:"bytes,3,opt,name=address3,proto3" json:"address3,omitempty"`
	// Name of the city. (required)
	City string `protobuf:"bytes,4,opt,name=city,proto3" json:"city,omitempty"`
	// Name of  the state, region or province. (optional)
	Province string `protobuf:"bytes,5,opt,name=province,proto3" json:"province,omitempty"`
	// Postal code. (required except for within HotelDetails)
	PostalCode string `protobuf:"bytes,6,opt,name=postal_code,json=postalCode,proto3" json:"postal_code,omitempty"`
	// The ISO 3166 country code identified by the originating user request.
	// (optional)
	Country string `protobuf:"bytes,7,opt,name=country,proto3" json:"country,omitempty"`
}

func (x *Address) Reset() {
	*x = Address{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Address) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Address) ProtoMessage() {}

func (x *Address) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Address.ProtoReflect.Descriptor instead.
func (*Address) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{5}
}

func (x *Address) GetAddress1() string {
	if x != nil {
		return x.Address1
	}
	return ""
}

func (x *Address) GetAddress2() string {
	if x != nil {
		return x.Address2
	}
	return ""
}

func (x *Address) GetAddress3() string {
	if x != nil {
		return x.Address3
	}
	return ""
}

func (x *Address) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *Address) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *Address) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *Address) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

// Static list of typical room amenities.
type BasicAmenities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FreeBreakfast bool `protobuf:"varint,1,opt,name=free_breakfast,json=freeBreakfast,proto3" json:"free_breakfast,omitempty"`
	FreeWifi      bool `protobuf:"varint,2,opt,name=free_wifi,json=freeWifi,proto3" json:"free_wifi,omitempty"`
	FreeParking   bool `protobuf:"varint,3,opt,name=free_parking,json=freeParking,proto3" json:"free_parking,omitempty"`
}

func (x *BasicAmenities) Reset() {
	*x = BasicAmenities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicAmenities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicAmenities) ProtoMessage() {}

func (x *BasicAmenities) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicAmenities.ProtoReflect.Descriptor instead.
func (*BasicAmenities) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{6}
}

func (x *BasicAmenities) GetFreeBreakfast() bool {
	if x != nil {
		return x.FreeBreakfast
	}
	return false
}

func (x *BasicAmenities) GetFreeWifi() bool {
	if x != nil {
		return x.FreeWifi
	}
	return false
}

func (x *BasicAmenities) GetFreeParking() bool {
	if x != nil {
		return x.FreeParking
	}
	return false
}

// Cancellation Policy details.
type CancellationPolicy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Summary of the cancellation policy. The value can be set with the
	// assumption that the reservation is made in advance of the
	// cancellation_deadline, and the policy displayed to the user will be
	// adjusted as needed if the cancellation_deadline has already passed.
	// (required)
	Summary CancellationPolicy_CancellationSummary `protobuf:"varint,1,opt,name=summary,proto3,enum=ext.travel.booking.partner.v1.CancellationPolicy_CancellationSummary" json:"summary,omitempty"`
	// If the summary is FREE_CANCELLATION, this is the date and time after which
	// it is no longer possible to cancel the reservation without a penalty. If a
	// penalty is only charged in the case of a no show, this value should be set
	// to "NO_SHOW". If there is never a penalty for cancellation or no show, this
	// field should be set to an empty string.
	//
	// If the summary is PARTIAL_REFUND, this is the date and time after it is no
	// longer possible to cancel the reservation without a penalty less than the
	// total amount paid, if there was a deposit, or less than the total amount of
	// the reservation, if there was not a deposit. If a penalty of at least the
	// total amount paid, if there was a deposit, or at least the total amount of
	// the reservation, if there was not a deposit, is only charged in the case of
	// a no show, this value should be set to "NO_SHOW". If there is never a
	// penalty for cancellation or no show of at least the total amount paid, if
	// there was a deposit, or at least the total amount of the reservation, if
	// there was not a deposit, this field should be set to an empty string.
	//
	// If the value is a date and time, this field is in ISO 8601 format
	// YYYY-MM-DDThh:mm:ss+/-hh:mm.
	//
	// (required if summary is FREE_CANCELLATION or PARTIAL_REFUND)
	CancellationDeadline string `protobuf:"bytes,2,opt,name=cancellation_deadline,json=cancellationDeadline,proto3" json:"cancellation_deadline,omitempty"`
	// Display additional policy information associated with this cancellation
	// policy. (required unless rules is fully specified in each RoomRate using
	// this RatePlan)
	UnstructuredPolicy *DisplayString `protobuf:"bytes,3,opt,name=unstructured_policy,json=unstructuredPolicy,proto3" json:"unstructured_policy,omitempty"`
}

func (x *CancellationPolicy) Reset() {
	*x = CancellationPolicy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CancellationPolicy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CancellationPolicy) ProtoMessage() {}

func (x *CancellationPolicy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CancellationPolicy.ProtoReflect.Descriptor instead.
func (*CancellationPolicy) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{7}
}

func (x *CancellationPolicy) GetSummary() CancellationPolicy_CancellationSummary {
	if x != nil {
		return x.Summary
	}
	return CancellationPolicy_UNKNOWN_CANCELLATION_POLICY
}

func (x *CancellationPolicy) GetCancellationDeadline() string {
	if x != nil {
		return x.CancellationDeadline
	}
	return ""
}

func (x *CancellationPolicy) GetUnstructuredPolicy() *DisplayString {
	if x != nil {
		return x.UnstructuredPolicy
	}
	return nil
}

// Number of adult and children occupants.
type Capacity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Maximum occupants that the room is capable of accommodating. (required)
	Adults int32 `protobuf:"varint,1,opt,name=adults,proto3" json:"adults,omitempty"`
	// Number of children allowed in the room. (optional)
	Children int32 `protobuf:"varint,2,opt,name=children,proto3" json:"children,omitempty"`
}

func (x *Capacity) Reset() {
	*x = Capacity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Capacity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Capacity) ProtoMessage() {}

func (x *Capacity) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Capacity.ProtoReflect.Descriptor instead.
func (*Capacity) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{8}
}

func (x *Capacity) GetAdults() int32 {
	if x != nil {
		return x.Adults
	}
	return 0
}

func (x *Capacity) GetChildren() int32 {
	if x != nil {
		return x.Children
	}
	return 0
}

// Customer details.
type Customer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Given name. (required)
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// Surname. (required)
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// Domestic format for given country. (required)
	PhoneNumber string `protobuf:"bytes,3,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Customer email address. (required)
	Email string `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	// The ISO 3166 country code identified by the originating user request.
	// (required)
	Country string `protobuf:"bytes,5,opt,name=country,proto3" json:"country,omitempty"`
	// The user wants to enroll in the partner's loyalty program.
	JoinLoyaltyProgram bool `protobuf:"varint,6,opt,name=join_loyalty_program,json=joinLoyaltyProgram,proto3" json:"join_loyalty_program,omitempty"`
	// Membership identifier in the partner's loyalty program.
	LoyaltyMemberId string `protobuf:"bytes,7,opt,name=loyalty_member_id,json=loyaltyMemberId,proto3" json:"loyalty_member_id,omitempty"`
}

func (x *Customer) Reset() {
	*x = Customer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Customer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Customer) ProtoMessage() {}

func (x *Customer) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Customer.ProtoReflect.Descriptor instead.
func (*Customer) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{9}
}

func (x *Customer) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Customer) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Customer) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *Customer) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *Customer) GetCountry() string {
	if x != nil {
		return x.Country
	}
	return ""
}

func (x *Customer) GetJoinLoyaltyProgram() bool {
	if x != nil {
		return x.JoinLoyaltyProgram
	}
	return false
}

func (x *Customer) GetLoyaltyMemberId() string {
	if x != nil {
		return x.LoyaltyMemberId
	}
	return ""
}

// Text for display along with it's specified language code (if available).
type DisplayString struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The text to be displayed. (required)
	Text string `protobuf:"bytes,1,opt,name=text,proto3" json:"text,omitempty"`
	// The BCP-47 language tag identifying the language expected in the response.
	// (required, unless language is not known)
	Language string `protobuf:"bytes,2,opt,name=language,proto3" json:"language,omitempty"`
}

func (x *DisplayString) Reset() {
	*x = DisplayString{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DisplayString) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DisplayString) ProtoMessage() {}

func (x *DisplayString) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DisplayString.ProtoReflect.Descriptor instead.
func (*DisplayString) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{10}
}

func (x *DisplayString) GetText() string {
	if x != nil {
		return x.Text
	}
	return ""
}

func (x *DisplayString) GetLanguage() string {
	if x != nil {
		return x.Language
	}
	return ""
}

// Hotel property metadata details.
type HotelDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the hotel property. (required)
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Address of the hotel property. (required)
	Address *Address `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	// Geolocation of the hotel property. (optional)
	Geolocation *HotelDetails_Geolocation `protobuf:"bytes,3,opt,name=geolocation,proto3" json:"geolocation,omitempty"`
	// The phone number customers can use to reach the hotel. (required)
	PhoneNumber string `protobuf:"bytes,4,opt,name=phone_number,json=phoneNumber,proto3" json:"phone_number,omitempty"`
	// Hotel policies. (optional)
	Policies *HotelDetails_HotelPolicies `protobuf:"bytes,5,opt,name=policies,proto3" json:"policies,omitempty"`
	// Hotel property photos. (optional)
	Photos []*Photo `protobuf:"bytes,6,rep,name=photos,proto3" json:"photos,omitempty"`
	// The email address customers can use to reach the hotel. (optional)
	Email string `protobuf:"bytes,7,opt,name=email,proto3" json:"email,omitempty"`
	// The url for the hotel's home page. (optional)
	HomepageUrl string `protobuf:"bytes,8,opt,name=homepage_url,json=homepageUrl,proto3" json:"homepage_url,omitempty"`
}

func (x *HotelDetails) Reset() {
	*x = HotelDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotelDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotelDetails) ProtoMessage() {}

func (x *HotelDetails) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotelDetails.ProtoReflect.Descriptor instead.
func (*HotelDetails) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{11}
}

func (x *HotelDetails) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HotelDetails) GetAddress() *Address {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *HotelDetails) GetGeolocation() *HotelDetails_Geolocation {
	if x != nil {
		return x.Geolocation
	}
	return nil
}

func (x *HotelDetails) GetPhoneNumber() string {
	if x != nil {
		return x.PhoneNumber
	}
	return ""
}

func (x *HotelDetails) GetPolicies() *HotelDetails_HotelPolicies {
	if x != nil {
		return x.Policies
	}
	return nil
}

func (x *HotelDetails) GetPhotos() []*Photo {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *HotelDetails) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *HotelDetails) GetHomepageUrl() string {
	if x != nil {
		return x.HomepageUrl
	}
	return ""
}

// Number of adult guests and children by age in years in a party.
type Occupancy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If only a total person occupancy is known, consider all to be adults.
	// (required)
	Adults int32 `protobuf:"varint,1,opt,name=adults,proto3" json:"adults,omitempty"`
	// One element per child occupant with value equal to the child's age in
	// years. (optional)
	Children []int32 `protobuf:"varint,2,rep,packed,name=children,proto3" json:"children,omitempty"`
}

func (x *Occupancy) Reset() {
	*x = Occupancy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Occupancy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Occupancy) ProtoMessage() {}

func (x *Occupancy) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Occupancy.ProtoReflect.Descriptor instead.
func (*Occupancy) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{12}
}

func (x *Occupancy) GetAdults() int32 {
	if x != nil {
		return x.Adults
	}
	return 0
}

func (x *Occupancy) GetChildren() []int32 {
	if x != nil {
		return x.Children
	}
	return nil
}

// Partner policy details.
type PartnerPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Credit card option details. (required)
	CardOptions []*PartnerPolicies_CardOption `protobuf:"bytes,1,rep,name=card_options,json=cardOptions,proto3" json:"card_options,omitempty"`
	// Display additional policy information associated with this partner policy.
	// (optional)
	UnstructuredPolicies []*DisplayString `protobuf:"bytes,2,rep,name=unstructured_policies,json=unstructuredPolicies,proto3" json:"unstructured_policies,omitempty"`
}

func (x *PartnerPolicies) Reset() {
	*x = PartnerPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerPolicies) ProtoMessage() {}

func (x *PartnerPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerPolicies.ProtoReflect.Descriptor instead.
func (*PartnerPolicies) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{13}
}

func (x *PartnerPolicies) GetCardOptions() []*PartnerPolicies_CardOption {
	if x != nil {
		return x.CardOptions
	}
	return nil
}

func (x *PartnerPolicies) GetUnstructuredPolicies() []*DisplayString {
	if x != nil {
		return x.UnstructuredPolicies
	}
	return nil
}

// Photo definition.
type Photo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The url of the photo. (required)
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	// Description of the photo, sometimes used at the alt text for display.
	// (optional)
	Description *DisplayString `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Photo) Reset() {
	*x = Photo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Photo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Photo) ProtoMessage() {}

func (x *Photo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Photo.ProtoReflect.Descriptor instead.
func (*Photo) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{14}
}

func (x *Photo) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *Photo) GetDescription() *DisplayString {
	if x != nil {
		return x.Description
	}
	return nil
}

// Price details.
type Price struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price in float, ex. 123.45 (required)
	Amount float32 `protobuf:"fixed32,1,opt,name=amount,proto3" json:"amount,omitempty"`
	// The currency of the price that is defined in ISO 4217. (required)
	Currency string `protobuf:"bytes,2,opt,name=currency,proto3" json:"currency,omitempty"`
}

func (x *Price) Reset() {
	*x = Price{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Price) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Price) ProtoMessage() {}

func (x *Price) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Price.ProtoReflect.Descriptor instead.
func (*Price) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{15}
}

func (x *Price) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Price) GetCurrency() string {
	if x != nil {
		return x.Currency
	}
	return ""
}

// Rate plan details.
type RatePlan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the rate plan. (required)
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Partner provided rate plan name. (required)
	Name *DisplayString `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description displayed for this rate plan. (optional)
	Description *DisplayString `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Indicates basic amenities available for this rate plan. (optional)
	BasicAmenities *BasicAmenities `protobuf:"bytes,4,opt,name=basic_amenities,json=basicAmenities,proto3" json:"basic_amenities,omitempty"`
	// Optional type of guarantee required to guarantee reservation. (required)
	GuaranteeType GuaranteeType `protobuf:"varint,5,opt,name=guarantee_type,json=guaranteeType,proto3,enum=ext.travel.booking.partner.v1.GuaranteeType" json:"guarantee_type,omitempty"`
	// The designated cancellation policy for this rate plan.  (required)
	CancellationPolicy *CancellationPolicy `protobuf:"bytes,6,opt,name=cancellation_policy,json=cancellationPolicy,proto3" json:"cancellation_policy,omitempty"`
	// Display additional policy information associated with this rate plan.
	// (optional)
	UnstructuredPolicies []*DisplayString `protobuf:"bytes,7,rep,name=unstructured_policies,json=unstructuredPolicies,proto3" json:"unstructured_policies,omitempty"`
	// Conditions or restrictions for booking with this RoomRate.
	RateRestrictions []*RatePlan_RateRestriction `protobuf:"bytes,8,rep,name=rate_restrictions,json=rateRestrictions,proto3" json:"rate_restrictions,omitempty"`
}

func (x *RatePlan) Reset() {
	*x = RatePlan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatePlan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatePlan) ProtoMessage() {}

func (x *RatePlan) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatePlan.ProtoReflect.Descriptor instead.
func (*RatePlan) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{16}
}

func (x *RatePlan) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RatePlan) GetName() *DisplayString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RatePlan) GetDescription() *DisplayString {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RatePlan) GetBasicAmenities() *BasicAmenities {
	if x != nil {
		return x.BasicAmenities
	}
	return nil
}

func (x *RatePlan) GetGuaranteeType() GuaranteeType {
	if x != nil {
		return x.GuaranteeType
	}
	return GuaranteeType_UNKNOWN_GUARANTEE_TYPE
}

func (x *RatePlan) GetCancellationPolicy() *CancellationPolicy {
	if x != nil {
		return x.CancellationPolicy
	}
	return nil
}

func (x *RatePlan) GetUnstructuredPolicies() []*DisplayString {
	if x != nil {
		return x.UnstructuredPolicies
	}
	return nil
}

func (x *RatePlan) GetRateRestrictions() []*RatePlan_RateRestriction {
	if x != nil {
		return x.RateRestrictions
	}
	return nil
}

// Room rate details.
type RoomRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the room type, should correspond to RoomID in the
	// RoomBundle. (required)
	// https://developers.google.com/hotels/hotel-ads/xml-reference/transaction-messages#RoomBundle
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// Identifier for the associated room type. (required)
	RoomTypeCode string `protobuf:"bytes,2,opt,name=room_type_code,json=roomTypeCode,proto3" json:"room_type_code,omitempty"`
	// Identifier for the associated rate plan. (required)
	RatePlanCode string `protobuf:"bytes,3,opt,name=rate_plan_code,json=ratePlanCode,proto3" json:"rate_plan_code,omitempty"`
	// Maximum occupancy allowed for this room rate. If not specified, the room
	// rate must accommodate the party in the BookingAvailabilityRequest.
	// (optional)
	MaximumAllowedOccupancy *Capacity `protobuf:"bytes,4,opt,name=maximum_allowed_occupancy,json=maximumAllowedOccupancy,proto3" json:"maximum_allowed_occupancy,omitempty"`
	// Total price at booking, should equal the sum of line_items for which
	// paid_at_checkout is false. (required)
	TotalPriceAtBooking *Price `protobuf:"bytes,5,opt,name=total_price_at_booking,json=totalPriceAtBooking,proto3" json:"total_price_at_booking,omitempty"`
	// Total price at checkout, should equal the sum of line_items for which
	// paid_at_checkout is true. (required)
	TotalPriceAtCheckout *Price `protobuf:"bytes,6,opt,name=total_price_at_checkout,json=totalPriceAtCheckout,proto3" json:"total_price_at_checkout,omitempty"`
	// List of line item details. Will not be populated in BookingSubmitRequest.
	// (required for availability response only)
	LineItems []*RoomRate_LineItem `protobuf:"bytes,7,rep,name=line_items,json=lineItems,proto3" json:"line_items,omitempty"`
	// Preferred over CancellationPolicy/unstructured_policy when available. Will
	// not be populated in BookingSubmitRequest. (optional)
	CancellationRules []*RoomRate_CancellationRule `protobuf:"bytes,8,rep,name=cancellation_rules,json=cancellationRules,proto3" json:"cancellation_rules,omitempty"`
	// Display additional policy information associated with this room rate. Will
	// not be populated in BookingSubmitRequest. (optional)
	UnstructuredPolicy *DisplayString `protobuf:"bytes,9,opt,name=unstructured_policy,json=unstructuredPolicy,proto3" json:"unstructured_policy,omitempty"`
	// Arbitrary data to be echoed back in the booking submission. (optional)
	PartnerData []string `protobuf:"bytes,10,rep,name=partner_data,json=partnerData,proto3" json:"partner_data,omitempty"`
	// Number of rooms available for this RoomRate. Will not be populated in
	// BookingSubmitRequest. (optional)
	RoomCount int32 `protobuf:"varint,11,opt,name=room_count,json=roomCount,proto3" json:"room_count,omitempty"`
}

func (x *RoomRate) Reset() {
	*x = RoomRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomRate) ProtoMessage() {}

func (x *RoomRate) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomRate.ProtoReflect.Descriptor instead.
func (*RoomRate) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{17}
}

func (x *RoomRate) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RoomRate) GetRoomTypeCode() string {
	if x != nil {
		return x.RoomTypeCode
	}
	return ""
}

func (x *RoomRate) GetRatePlanCode() string {
	if x != nil {
		return x.RatePlanCode
	}
	return ""
}

func (x *RoomRate) GetMaximumAllowedOccupancy() *Capacity {
	if x != nil {
		return x.MaximumAllowedOccupancy
	}
	return nil
}

func (x *RoomRate) GetTotalPriceAtBooking() *Price {
	if x != nil {
		return x.TotalPriceAtBooking
	}
	return nil
}

func (x *RoomRate) GetTotalPriceAtCheckout() *Price {
	if x != nil {
		return x.TotalPriceAtCheckout
	}
	return nil
}

func (x *RoomRate) GetLineItems() []*RoomRate_LineItem {
	if x != nil {
		return x.LineItems
	}
	return nil
}

func (x *RoomRate) GetCancellationRules() []*RoomRate_CancellationRule {
	if x != nil {
		return x.CancellationRules
	}
	return nil
}

func (x *RoomRate) GetUnstructuredPolicy() *DisplayString {
	if x != nil {
		return x.UnstructuredPolicy
	}
	return nil
}

func (x *RoomRate) GetPartnerData() []string {
	if x != nil {
		return x.PartnerData
	}
	return nil
}

func (x *RoomRate) GetRoomCount() int32 {
	if x != nil {
		return x.RoomCount
	}
	return 0
}

// Room type details.
type RoomType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier for the room type, should correspond to RoomID in the
	// RoomBundle. (required)
	// https://developers.google.com/hotels/hotel-ads/xml-reference/transaction-messages#RoomBundle
	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	// The name of the room type.
	Name *DisplayString `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// The description displayed for this room type. (optional)
	Description *DisplayString `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	// Basic amenities for the associated room type. (optional)
	BasicAmenities *BasicAmenities `protobuf:"bytes,4,opt,name=basic_amenities,json=basicAmenities,proto3" json:"basic_amenities,omitempty"`
	// List of amenities available in the room. If an amenity is not specified in
	// the array, we assume it's unknown. (optional)
	RoomAmenities []RoomAmenityType `protobuf:"varint,9,rep,packed,name=room_amenities,json=roomAmenities,proto3,enum=ext.travel.booking.partner.v1.RoomAmenityType" json:"room_amenities,omitempty"`
	// Room size in square meters. (optional)
	RoomAreaSqMeters float32 `protobuf:"fixed32,10,opt,name=room_area_sq_meters,json=roomAreaSqMeters,proto3" json:"room_area_sq_meters,omitempty"`
	// Room size in square feet. (optional)
	RoomAreaSqFeet float32 `protobuf:"fixed32,11,opt,name=room_area_sq_feet,json=roomAreaSqFeet,proto3" json:"room_area_sq_feet,omitempty"`
	// Room photos. (optional)
	Photos []*Photo `protobuf:"bytes,5,rep,name=photos,proto3" json:"photos,omitempty"`
	// Maximum occupants that the room is capable of accommodating. If not
	// specified, the room type must accommodate the party in the
	// BookingAvailabilityRequest. (optional)
	Capacity *Capacity `protobuf:"bytes,6,opt,name=capacity,proto3" json:"capacity,omitempty"`
	// Count of each bed type available in the room. (optional)
	BedTypes *RoomType_BedTypes `protobuf:"bytes,7,opt,name=bed_types,json=bedTypes,proto3" json:"bed_types,omitempty"`
	// Display additional policy information associated with this room type.
	// (required unless rules is fully specified)
	UnstructuredPolicies []*DisplayString `protobuf:"bytes,8,rep,name=unstructured_policies,json=unstructuredPolicies,proto3" json:"unstructured_policies,omitempty"`
}

func (x *RoomType) Reset() {
	*x = RoomType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomType) ProtoMessage() {}

func (x *RoomType) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomType.ProtoReflect.Descriptor instead.
func (*RoomType) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{18}
}

func (x *RoomType) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *RoomType) GetName() *DisplayString {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *RoomType) GetDescription() *DisplayString {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *RoomType) GetBasicAmenities() *BasicAmenities {
	if x != nil {
		return x.BasicAmenities
	}
	return nil
}

func (x *RoomType) GetRoomAmenities() []RoomAmenityType {
	if x != nil {
		return x.RoomAmenities
	}
	return nil
}

func (x *RoomType) GetRoomAreaSqMeters() float32 {
	if x != nil {
		return x.RoomAreaSqMeters
	}
	return 0
}

func (x *RoomType) GetRoomAreaSqFeet() float32 {
	if x != nil {
		return x.RoomAreaSqFeet
	}
	return 0
}

func (x *RoomType) GetPhotos() []*Photo {
	if x != nil {
		return x.Photos
	}
	return nil
}

func (x *RoomType) GetCapacity() *Capacity {
	if x != nil {
		return x.Capacity
	}
	return nil
}

func (x *RoomType) GetBedTypes() *RoomType_BedTypes {
	if x != nil {
		return x.BedTypes
	}
	return nil
}

func (x *RoomType) GetUnstructuredPolicies() []*DisplayString {
	if x != nil {
		return x.UnstructuredPolicies
	}
	return nil
}

// Booking submit error details.
type SubmitError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type SubmitError_SubmitErrorType `protobuf:"varint,1,opt,name=type,proto3,enum=ext.travel.booking.partner.v1.SubmitError_SubmitErrorType" json:"type,omitempty"`
	// Detailed message for debugging the error. (required)
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *SubmitError) Reset() {
	*x = SubmitError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitError) ProtoMessage() {}

func (x *SubmitError) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitError.ProtoReflect.Descriptor instead.
func (*SubmitError) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{19}
}

func (x *SubmitError) GetType() SubmitError_SubmitErrorType {
	if x != nil {
		return x.Type
	}
	return SubmitError_UNKNOWN_ERROR
}

func (x *SubmitError) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// Partner provided tracking parameters.
type Tracking struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Optional advertising campaign identifier. (optional)
	CampaignId string `protobuf:"bytes,1,opt,name=campaign_id,json=campaignId,proto3" json:"campaign_id,omitempty"`
	// Point of Sale (POS) URL, a deep link to the partner's website that may
	// contain tracking parameters. (optional)
	PosUrl string `protobuf:"bytes,2,opt,name=pos_url,json=posUrl,proto3" json:"pos_url,omitempty"`
}

func (x *Tracking) Reset() {
	*x = Tracking{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tracking) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tracking) ProtoMessage() {}

func (x *Tracking) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tracking.ProtoReflect.Descriptor instead.
func (*Tracking) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{20}
}

func (x *Tracking) GetCampaignId() string {
	if x != nil {
		return x.CampaignId
	}
	return ""
}

func (x *Tracking) GetPosUrl() string {
	if x != nil {
		return x.PosUrl
	}
	return ""
}

// Traveler details.
type Traveler struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Given name. (required)
	FirstName string `protobuf:"bytes,1,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty"`
	// Surname. (required)
	LastName string `protobuf:"bytes,2,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty"`
	// Count of travlers in party. (required)
	Occupancy *Occupancy `protobuf:"bytes,3,opt,name=occupancy,proto3" json:"occupancy,omitempty"`
}

func (x *Traveler) Reset() {
	*x = Traveler{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Traveler) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Traveler) ProtoMessage() {}

func (x *Traveler) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Traveler.ProtoReflect.Descriptor instead.
func (*Traveler) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{21}
}

func (x *Traveler) GetFirstName() string {
	if x != nil {
		return x.FirstName
	}
	return ""
}

func (x *Traveler) GetLastName() string {
	if x != nil {
		return x.LastName
	}
	return ""
}

func (x *Traveler) GetOccupancy() *Occupancy {
	if x != nil {
		return x.Occupancy
	}
	return nil
}

type BookingSubmitRequest_Payment struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Selected guarantee type. (required)
	Type GuaranteeType `protobuf:"varint,1,opt,name=type,proto3,enum=ext.travel.booking.partner.v1.GuaranteeType" json:"type,omitempty"`
	// Detailed credit card information. (required if type is PAYMENT_CARD
	// unless tokenized payments are being used, in which case payment_token
	// will be populated instead)
	PaymentCardParameters *BookingSubmitRequest_Payment_PaymentCardParameters `protobuf:"bytes,2,opt,name=payment_card_parameters,json=paymentCardParameters,proto3" json:"payment_card_parameters,omitempty"`
	// Payment token generated by Google Pay for partners using tokenized
	// payments. Partners can redeem the token through the partner's payment
	// processor using the processor’s API for Google Pay (required if type is
	// PAYMENT_CARD and tokenized payments are being used)
	PaymentToken string `protobuf:"bytes,3,opt,name=payment_token,json=paymentToken,proto3" json:"payment_token,omitempty"`
	// Billing address associated with the credit card. (required if type is
	// PAYMENT_CARD unless tokenized payments are being used)
	BillingAddress *Address `protobuf:"bytes,4,opt,name=billing_address,json=billingAddress,proto3" json:"billing_address,omitempty"`
}

func (x *BookingSubmitRequest_Payment) Reset() {
	*x = BookingSubmitRequest_Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingSubmitRequest_Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSubmitRequest_Payment) ProtoMessage() {}

func (x *BookingSubmitRequest_Payment) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSubmitRequest_Payment.ProtoReflect.Descriptor instead.
func (*BookingSubmitRequest_Payment) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{2, 0}
}

func (x *BookingSubmitRequest_Payment) GetType() GuaranteeType {
	if x != nil {
		return x.Type
	}
	return GuaranteeType_UNKNOWN_GUARANTEE_TYPE
}

func (x *BookingSubmitRequest_Payment) GetPaymentCardParameters() *BookingSubmitRequest_Payment_PaymentCardParameters {
	if x != nil {
		return x.PaymentCardParameters
	}
	return nil
}

func (x *BookingSubmitRequest_Payment) GetPaymentToken() string {
	if x != nil {
		return x.PaymentToken
	}
	return ""
}

func (x *BookingSubmitRequest_Payment) GetBillingAddress() *Address {
	if x != nil {
		return x.BillingAddress
	}
	return nil
}

type BookingSubmitRequest_Payment_PaymentCardParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of credit card. (required)
	CardType CardType `protobuf:"varint,1,opt,name=card_type,json=cardType,proto3,enum=ext.travel.booking.partner.v1.CardType" json:"card_type,omitempty"`
	// Credit card number. (required)
	CardNumber string `protobuf:"bytes,2,opt,name=card_number,json=cardNumber,proto3" json:"card_number,omitempty"`
	// Name of card holder. (required)
	CardholderName string `protobuf:"bytes,3,opt,name=cardholder_name,json=cardholderName,proto3" json:"cardholder_name,omitempty"`
	// 2-digit month (format MM). (required)
	ExpirationMonth string `protobuf:"bytes,4,opt,name=expiration_month,json=expirationMonth,proto3" json:"expiration_month,omitempty"`
	// 4-digit year (format YYYY)
	ExpirationYear string `protobuf:"bytes,5,opt,name=expiration_year,json=expirationYear,proto3" json:"expiration_year,omitempty"`
	// Card verification code. (required if cvc_required in the CardOption is
	// true)
	Cvc string `protobuf:"bytes,6,opt,name=cvc,proto3" json:"cvc,omitempty"`
	// Cardholder authentication verification value. This token is populated
	// if the transaction went through a 3-D Secure 2 authentication flow.
	// (optional)
	Cavv string `protobuf:"bytes,7,opt,name=cavv,proto3" json:"cavv,omitempty"`
	// The ECI (Electronic Commerce Indicator) indicates the status of the
	// card authentication. This is specific to the card type used in the
	// transaction and populated if the transaction went through a 3-D Secure
	// authentication flow. (optional)
	Eci string `protobuf:"bytes,8,opt,name=eci,proto3" json:"eci,omitempty"`
}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) Reset() {
	*x = BookingSubmitRequest_Payment_PaymentCardParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSubmitRequest_Payment_PaymentCardParameters) ProtoMessage() {}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSubmitRequest_Payment_PaymentCardParameters.ProtoReflect.Descriptor instead.
func (*BookingSubmitRequest_Payment_PaymentCardParameters) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_AX
}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) GetCardNumber() string {
	if x != nil {
		return x.CardNumber
	}
	return ""
}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) GetCardholderName() string {
	if x != nil {
		return x.CardholderName
	}
	return ""
}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) GetExpirationMonth() string {
	if x != nil {
		return x.ExpirationMonth
	}
	return ""
}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) GetExpirationYear() string {
	if x != nil {
		return x.ExpirationYear
	}
	return ""
}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) GetCvc() string {
	if x != nil {
		return x.Cvc
	}
	return ""
}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) GetCavv() string {
	if x != nil {
		return x.Cavv
	}
	return ""
}

func (x *BookingSubmitRequest_Payment_PaymentCardParameters) GetEci() string {
	if x != nil {
		return x.Eci
	}
	return ""
}

type BookingSubmitResponse_Reservation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Locator in the partner's reservation system. (required unless error)
	Locator *BookingSubmitResponse_Reservation_Locator `protobuf:"bytes,1,opt,name=locator,proto3" json:"locator,omitempty"`
	// Locator in the hotel's reservation system, with either one element for
	// the reservation or one element for each room. (optional)
	HotelLocators []*BookingSubmitResponse_Reservation_Locator `protobuf:"bytes,2,rep,name=hotel_locators,json=hotelLocators,proto3" json:"hotel_locators,omitempty"`
	// Partner hotel ID. (required)
	HotelId string `protobuf:"bytes,4,opt,name=hotel_id,json=hotelId,proto3" json:"hotel_id,omitempty"`
	// Check-in date (format YYYY-MM-DD). (required)
	StartDate string `protobuf:"bytes,5,opt,name=start_date,json=startDate,proto3" json:"start_date,omitempty"`
	// Check-out date (format YYYY-MM-DD). (required)
	EndDate string `protobuf:"bytes,6,opt,name=end_date,json=endDate,proto3" json:"end_date,omitempty"`
	// Customer details. (required)
	Customer *Customer `protobuf:"bytes,8,opt,name=customer,proto3" json:"customer,omitempty"`
	// Primary traveler details along with party details. (required)
	Traveler *Traveler `protobuf:"bytes,9,opt,name=traveler,proto3" json:"traveler,omitempty"`
	// Room rate details. (required)
	RoomRate *RoomRate `protobuf:"bytes,10,opt,name=room_rate,json=roomRate,proto3" json:"room_rate,omitempty"`
}

func (x *BookingSubmitResponse_Reservation) Reset() {
	*x = BookingSubmitResponse_Reservation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingSubmitResponse_Reservation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSubmitResponse_Reservation) ProtoMessage() {}

func (x *BookingSubmitResponse_Reservation) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSubmitResponse_Reservation.ProtoReflect.Descriptor instead.
func (*BookingSubmitResponse_Reservation) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{3, 0}
}

func (x *BookingSubmitResponse_Reservation) GetLocator() *BookingSubmitResponse_Reservation_Locator {
	if x != nil {
		return x.Locator
	}
	return nil
}

func (x *BookingSubmitResponse_Reservation) GetHotelLocators() []*BookingSubmitResponse_Reservation_Locator {
	if x != nil {
		return x.HotelLocators
	}
	return nil
}

func (x *BookingSubmitResponse_Reservation) GetHotelId() string {
	if x != nil {
		return x.HotelId
	}
	return ""
}

func (x *BookingSubmitResponse_Reservation) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *BookingSubmitResponse_Reservation) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *BookingSubmitResponse_Reservation) GetCustomer() *Customer {
	if x != nil {
		return x.Customer
	}
	return nil
}

func (x *BookingSubmitResponse_Reservation) GetTraveler() *Traveler {
	if x != nil {
		return x.Traveler
	}
	return nil
}

func (x *BookingSubmitResponse_Reservation) GetRoomRate() *RoomRate {
	if x != nil {
		return x.RoomRate
	}
	return nil
}

type BookingSubmitResponse_Reservation_Locator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier for the reservation. (required)
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// Password needed to access the reservation. (optional)
	Pin string `protobuf:"bytes,2,opt,name=pin,proto3" json:"pin,omitempty"`
}

func (x *BookingSubmitResponse_Reservation_Locator) Reset() {
	*x = BookingSubmitResponse_Reservation_Locator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BookingSubmitResponse_Reservation_Locator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BookingSubmitResponse_Reservation_Locator) ProtoMessage() {}

func (x *BookingSubmitResponse_Reservation_Locator) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BookingSubmitResponse_Reservation_Locator.ProtoReflect.Descriptor instead.
func (*BookingSubmitResponse_Reservation_Locator) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{3, 0, 0}
}

func (x *BookingSubmitResponse_Reservation_Locator) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *BookingSubmitResponse_Reservation_Locator) GetPin() string {
	if x != nil {
		return x.Pin
	}
	return ""
}

// Represents a latitude and longitude coordinate location.
type HotelDetails_Geolocation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Latitude  float64 `protobuf:"fixed64,1,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude float64 `protobuf:"fixed64,2,opt,name=longitude,proto3" json:"longitude,omitempty"`
}

func (x *HotelDetails_Geolocation) Reset() {
	*x = HotelDetails_Geolocation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotelDetails_Geolocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotelDetails_Geolocation) ProtoMessage() {}

func (x *HotelDetails_Geolocation) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotelDetails_Geolocation.ProtoReflect.Descriptor instead.
func (*HotelDetails_Geolocation) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{11, 0}
}

func (x *HotelDetails_Geolocation) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *HotelDetails_Geolocation) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

// Hotel policy details.
type HotelDetails_HotelPolicies struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Check-in time in the hotel's local time zone including the time zone if
	// possible (ISO 8601 format hh:mm or hh:mm+/-hh:mm). (optional)
	CheckInTime string `protobuf:"bytes,1,opt,name=check_in_time,json=checkInTime,proto3" json:"check_in_time,omitempty"`
	// Check-out time in the hotel's local time zone including the time zone if
	// possible (ISO 8601 format hh:mm or hh:mm+/-hh:mm). (optional)
	CheckOutTime string `protobuf:"bytes,2,opt,name=check_out_time,json=checkOutTime,proto3" json:"check_out_time,omitempty"`
	// Maximum age for a guest to be considered a child. (optional)
	MaxChildAge int32 `protobuf:"varint,3,opt,name=max_child_age,json=maxChildAge,proto3" json:"max_child_age,omitempty"`
	// Display additional policy information associated with this rate plan.
	// (optional)
	UnstructuredPolicies []*DisplayString `protobuf:"bytes,4,rep,name=unstructured_policies,json=unstructuredPolicies,proto3" json:"unstructured_policies,omitempty"`
}

func (x *HotelDetails_HotelPolicies) Reset() {
	*x = HotelDetails_HotelPolicies{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HotelDetails_HotelPolicies) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HotelDetails_HotelPolicies) ProtoMessage() {}

func (x *HotelDetails_HotelPolicies) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HotelDetails_HotelPolicies.ProtoReflect.Descriptor instead.
func (*HotelDetails_HotelPolicies) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{11, 1}
}

func (x *HotelDetails_HotelPolicies) GetCheckInTime() string {
	if x != nil {
		return x.CheckInTime
	}
	return ""
}

func (x *HotelDetails_HotelPolicies) GetCheckOutTime() string {
	if x != nil {
		return x.CheckOutTime
	}
	return ""
}

func (x *HotelDetails_HotelPolicies) GetMaxChildAge() int32 {
	if x != nil {
		return x.MaxChildAge
	}
	return 0
}

func (x *HotelDetails_HotelPolicies) GetUnstructuredPolicies() []*DisplayString {
	if x != nil {
		return x.UnstructuredPolicies
	}
	return nil
}

type PartnerPolicies_CardOption struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specify the card type. (required)
	CardType CardType `protobuf:"varint,1,opt,name=card_type,json=cardType,proto3,enum=ext.travel.booking.partner.v1.CardType" json:"card_type,omitempty"`
	// Whether or not the CVC number is required. (required)
	CvcRequired bool `protobuf:"varint,2,opt,name=cvc_required,json=cvcRequired,proto3" json:"cvc_required,omitempty"`
}

func (x *PartnerPolicies_CardOption) Reset() {
	*x = PartnerPolicies_CardOption{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartnerPolicies_CardOption) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartnerPolicies_CardOption) ProtoMessage() {}

func (x *PartnerPolicies_CardOption) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartnerPolicies_CardOption.ProtoReflect.Descriptor instead.
func (*PartnerPolicies_CardOption) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{13, 0}
}

func (x *PartnerPolicies_CardOption) GetCardType() CardType {
	if x != nil {
		return x.CardType
	}
	return CardType_AX
}

func (x *PartnerPolicies_CardOption) GetCvcRequired() bool {
	if x != nil {
		return x.CvcRequired
	}
	return false
}

// Specifies conditions that must be satisfied to book a rate.
type RatePlan_RateRestriction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the rate requires the user to provide a loyalty number or sign up for
	// the loyalty program during the booking operation.
	RequiresLoyaltyMembership bool `protobuf:"varint,1,opt,name=requires_loyalty_membership,json=requiresLoyaltyMembership,proto3" json:"requires_loyalty_membership,omitempty"`
}

func (x *RatePlan_RateRestriction) Reset() {
	*x = RatePlan_RateRestriction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RatePlan_RateRestriction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RatePlan_RateRestriction) ProtoMessage() {}

func (x *RatePlan_RateRestriction) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RatePlan_RateRestriction.ProtoReflect.Descriptor instead.
func (*RatePlan_RateRestriction) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{16, 0}
}

func (x *RatePlan_RateRestriction) GetRequiresLoyaltyMembership() bool {
	if x != nil {
		return x.RequiresLoyaltyMembership
	}
	return false
}

type RoomRate_LineItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Price should be for the reservation and for the stay, unless stay_date
	// is specified, in which case it should be for the particular night of the
	// stay. (required)
	Price *Price `protobuf:"bytes,1,opt,name=price,proto3" json:"price,omitempty"`
	// The type of this line item. (required)
	Type RoomRate_LineItem_LineItemType `protobuf:"varint,2,opt,name=type,proto3,enum=ext.travel.booking.partner.v1.RoomRate_LineItem_LineItemType" json:"type,omitempty"`
	// True if price is paid at checkout, false if the price is paid at booking.
	// (required)
	PaidAtCheckout bool `protobuf:"varint,3,opt,name=paid_at_checkout,json=paidAtCheckout,proto3" json:"paid_at_checkout,omitempty"`
	// Line item descripion. (optional)
	Description *DisplayString `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *RoomRate_LineItem) Reset() {
	*x = RoomRate_LineItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomRate_LineItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomRate_LineItem) ProtoMessage() {}

func (x *RoomRate_LineItem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomRate_LineItem.ProtoReflect.Descriptor instead.
func (*RoomRate_LineItem) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{17, 0}
}

func (x *RoomRate_LineItem) GetPrice() *Price {
	if x != nil {
		return x.Price
	}
	return nil
}

func (x *RoomRate_LineItem) GetType() RoomRate_LineItem_LineItemType {
	if x != nil {
		return x.Type
	}
	return RoomRate_LineItem_BASE_RATE
}

func (x *RoomRate_LineItem) GetPaidAtCheckout() bool {
	if x != nil {
		return x.PaidAtCheckout
	}
	return false
}

func (x *RoomRate_LineItem) GetDescription() *DisplayString {
	if x != nil {
		return x.Description
	}
	return nil
}

// Rules for applying penalties if certain cancellation deadlines are missed.
type RoomRate_CancellationRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Date and time after which the cancellation rule takes effect, or empty
	// if the rule is in effect from the time of booking (ISO 8601 format
	// YYYY-MM-DDThh:mm:ss+/-hh:mm), or "NO_SHOW" for a no show fee charged if
	// the user neither cancels nor shows up for the reservation. (required
	// unless rule is in effect from the time of booking)
	Deadline string `protobuf:"bytes,1,opt,name=deadline,proto3" json:"deadline,omitempty"`
	// Fee charged if the reservation is canceled after the deadline, or if the
	// deadline is "NO_SHOW", the fee charged if user does not show up.
	// (required)
	Penalty *Price `protobuf:"bytes,2,opt,name=penalty,proto3" json:"penalty,omitempty"`
}

func (x *RoomRate_CancellationRule) Reset() {
	*x = RoomRate_CancellationRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomRate_CancellationRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomRate_CancellationRule) ProtoMessage() {}

func (x *RoomRate_CancellationRule) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomRate_CancellationRule.ProtoReflect.Descriptor instead.
func (*RoomRate_CancellationRule) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{17, 1}
}

func (x *RoomRate_CancellationRule) GetDeadline() string {
	if x != nil {
		return x.Deadline
	}
	return ""
}

func (x *RoomRate_CancellationRule) GetPenalty() *Price {
	if x != nil {
		return x.Penalty
	}
	return nil
}

type RoomType_BedTypes struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TotalBeds        int32 `protobuf:"varint,1,opt,name=total_beds,json=totalBeds,proto3" json:"total_beds,omitempty"`
	KingBeds         int32 `protobuf:"varint,2,opt,name=king_beds,json=kingBeds,proto3" json:"king_beds,omitempty"`
	QueenBeds        int32 `protobuf:"varint,3,opt,name=queen_beds,json=queenBeds,proto3" json:"queen_beds,omitempty"`
	DoubleBeds       int32 `protobuf:"varint,4,opt,name=double_beds,json=doubleBeds,proto3" json:"double_beds,omitempty"`
	SingleOrTwinBeds int32 `protobuf:"varint,5,opt,name=single_or_twin_beds,json=singleOrTwinBeds,proto3" json:"single_or_twin_beds,omitempty"`
	MurphyBeds       int32 `protobuf:"varint,6,opt,name=murphy_beds,json=murphyBeds,proto3" json:"murphy_beds,omitempty"`
	SofaBeds         int32 `protobuf:"varint,7,opt,name=sofa_beds,json=sofaBeds,proto3" json:"sofa_beds,omitempty"`
	BunkBeds         int32 `protobuf:"varint,8,opt,name=bunk_beds,json=bunkBeds,proto3" json:"bunk_beds,omitempty"`
	OtherBeds        int32 `protobuf:"varint,9,opt,name=other_beds,json=otherBeds,proto3" json:"other_beds,omitempty"`
}

func (x *RoomType_BedTypes) Reset() {
	*x = RoomType_BedTypes{}
	if protoimpl.UnsafeEnabled {
		mi := &file_v1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoomType_BedTypes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoomType_BedTypes) ProtoMessage() {}

func (x *RoomType_BedTypes) ProtoReflect() protoreflect.Message {
	mi := &file_v1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoomType_BedTypes.ProtoReflect.Descriptor instead.
func (*RoomType_BedTypes) Descriptor() ([]byte, []int) {
	return file_v1_proto_rawDescGZIP(), []int{18, 0}
}

func (x *RoomType_BedTypes) GetTotalBeds() int32 {
	if x != nil {
		return x.TotalBeds
	}
	return 0
}

func (x *RoomType_BedTypes) GetKingBeds() int32 {
	if x != nil {
		return x.KingBeds
	}
	return 0
}

func (x *RoomType_BedTypes) GetQueenBeds() int32 {
	if x != nil {
		return x.QueenBeds
	}
	return 0
}

func (x *RoomType_BedTypes) GetDoubleBeds() int32 {
	if x != nil {
		return x.DoubleBeds
	}
	return 0
}

func (x *RoomType_BedTypes) GetSingleOrTwinBeds() int32 {
	if x != nil {
		return x.SingleOrTwinBeds
	}
	return 0
}

func (x *RoomType_BedTypes) GetMurphyBeds() int32 {
	if x != nil {
		return x.MurphyBeds
	}
	return 0
}

func (x *RoomType_BedTypes) GetSofaBeds() int32 {
	if x != nil {
		return x.SofaBeds
	}
	return 0
}

func (x *RoomType_BedTypes) GetBunkBeds() int32 {
	if x != nil {
		return x.BunkBeds
	}
	return 0
}

func (x *RoomType_BedTypes) GetOtherBeds() int32 {
	if x != nil {
		return x.OtherBeds
	}
	return 0
}

var File_v1_proto protoreflect.FileDescriptor

var file_v1_proto_rawDesc = []byte{
	0x0a, 0x08, 0x76, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1d, 0x65, 0x78, 0x74, 0x2e,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0xcc, 0x04, 0x0a, 0x1a, 0x42, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x43, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x74, 0x72, 0x61,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12,
	0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x78, 0x74, 0x2e,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61,
	0x6e, 0x63, 0x79, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x75, 0x73, 0x65, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x65, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x44, 0x2e, 0x65, 0x78, 0x74,
	0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x0a,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x44, 0x45, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x53, 0x4b, 0x54, 0x4f, 0x50, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x4d, 0x4f, 0x42, 0x49, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x54, 0x10, 0x03, 0x22, 0xb8, 0x05, 0x0a, 0x1b, 0x42, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61,
	0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61,
	0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x3e, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x05,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x12, 0x46, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x46, 0x0a,
	0x0a, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65,
	0x50, 0x6c, 0x61, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0a, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x61,
	0x74, 0x65, 0x52, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x73, 0x12, 0x50, 0x0a,
	0x0d, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x74, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x73, 0x52, 0x0c, 0x68, 0x6f, 0x74, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x4a, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65,
	0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x46, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x74,
	0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xe0, 0x09, 0x0a, 0x14, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b,
	0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a,
	0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x74,
	0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x74,
	0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78,
	0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x73, 0x74,
	0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x12, 0x43,
	0x0a, 0x08, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x72, 0x52, 0x08, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x52,
	0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x12, 0x55, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x65, 0x78, 0x74,
	0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x1a, 0x83, 0x05, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x74,
	0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x61,
	0x6e, 0x74, 0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x89,
	0x01, 0x0a, 0x17, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x61, 0x72, 0x64, 0x5f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x51, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x52, 0x15, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0c, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x4f, 0x0a, 0x0f, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x52, 0x0e, 0x62, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x1a, 0xb3, 0x02, 0x0a, 0x15, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x61, 0x72, 0x64,
	0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x44, 0x0a, 0x09, 0x63, 0x61,
	0x72, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x61, 0x72, 0x64, 0x4e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x72, 0x64, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x61, 0x72, 0x64,
	0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10, 0x65, 0x78,
	0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x59, 0x65, 0x61, 0x72, 0x12, 0x10,
	0x0a, 0x03, 0x63, 0x76, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x63, 0x76, 0x63,
	0x12, 0x12, 0x0a, 0x04, 0x63, 0x61, 0x76, 0x76, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x63, 0x61, 0x76, 0x76, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x63, 0x69, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x65, 0x63, 0x69, 0x22, 0xb5, 0x07, 0x0a, 0x15, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1f, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x61, 0x70, 0x69, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x53, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3b, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x62, 0x0a,
	0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x40, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72,
	0x72, 0x6f, 0x72, 0x1a, 0xb4, 0x04, 0x0a, 0x0b, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x07, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x48, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x07,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x6f, 0x0a, 0x0e, 0x68, 0x6f, 0x74, 0x65, 0x6c,
	0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x48, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x72, 0x76, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x52, 0x0d, 0x68, 0x6f, 0x74, 0x65, 0x6c,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x68, 0x6f, 0x74, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x6f, 0x74, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x44, 0x61, 0x74, 0x65, 0x12, 0x43, 0x0a,
	0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x65, 0x72, 0x52, 0x08, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x65, 0x72, 0x12, 0x43, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x72, 0x52, 0x08, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x5f,
	0x72, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x74,
	0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x08, 0x72, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x1a, 0x2b, 0x0a,
	0x07, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x70, 0x69, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x70, 0x69, 0x6e, 0x22, 0x22, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x01, 0x22, 0x8e,
	0x03, 0x0a, 0x11, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x5a, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x46, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x2e, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x82, 0x02, 0x0a, 0x15, 0x41,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x45, 0x72, 0x72, 0x6f, 0x72,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x49, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x02,
	0x12, 0x13, 0x0a, 0x0f, 0x48, 0x4f, 0x54, 0x45, 0x4c, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b,
	0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f,
	0x56, 0x45, 0x52, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12,
	0x18, 0x0a, 0x14, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x06, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x51,
	0x55, 0x45, 0x53, 0x54, 0x5f, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x07, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54,
	0x5f, 0x50, 0x41, 0x52, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x53,
	0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x09, 0x22,
	0xc8, 0x01, 0x0a, 0x07, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x31, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x32, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x32, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x33, 0x12,
	0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63,
	0x69, 0x74, 0x79, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x63, 0x65, 0x12,
	0x1f, 0x0a, 0x0b, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x22, 0x77, 0x0a, 0x0e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x41, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x25, 0x0a, 0x0e,
	0x66, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x72, 0x65, 0x61, 0x6b, 0x66, 0x61, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x66, 0x72, 0x65, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x66,
	0x61, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x77, 0x69, 0x66, 0x69,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x66, 0x72, 0x65, 0x65, 0x57, 0x69, 0x66, 0x69,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x70, 0x61, 0x72, 0x6b, 0x69, 0x6e, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x66, 0x72, 0x65, 0x65, 0x50, 0x61, 0x72, 0x6b,
	0x69, 0x6e, 0x67, 0x22, 0x80, 0x03, 0x0a, 0x12, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x5f, 0x0a, 0x07, 0x73, 0x75,
	0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x45, 0x2e, 0x65, 0x78,
	0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x43,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x33, 0x0a, 0x15, 0x63,
	0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x63, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65,
	0x12, 0x5d, 0x0a, 0x13, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x75, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x22,
	0x75, 0x0a, 0x13, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x1f, 0x0a, 0x1b, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50,
	0x4f, 0x4c, 0x49, 0x43, 0x59, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52, 0x45, 0x45, 0x5f,
	0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x01, 0x12, 0x12,
	0x0a, 0x0e, 0x4e, 0x4f, 0x4e, 0x5f, 0x52, 0x45, 0x46, 0x55, 0x4e, 0x44, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x52, 0x45,
	0x46, 0x55, 0x4e, 0x44, 0x10, 0x03, 0x22, 0x3e, 0x0a, 0x08, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69,
	0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68,
	0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xf7, 0x01, 0x0a, 0x08, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x30, 0x0a, 0x14, 0x6a, 0x6f, 0x69, 0x6e, 0x5f, 0x6c, 0x6f, 0x79, 0x61, 0x6c,
	0x74, 0x79, 0x5f, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x12, 0x6a, 0x6f, 0x69, 0x6e, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x67, 0x72, 0x61, 0x6d, 0x12, 0x2a, 0x0a, 0x11, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f,
	0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64,
	0x22, 0x3f, 0x0a, 0x0d, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x65, 0x78, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x74, 0x65, 0x78, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67,
	0x65, 0x22, 0xdc, 0x05, 0x0a, 0x0c, 0x48, 0x6f, 0x74, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52,
	0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x59, 0x0a, 0x0b, 0x67, 0x65, 0x6f, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f,
	0x74, 0x65, 0x6c, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x6c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x55, 0x0a, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x6f, 0x74, 0x65, 0x6c, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x48, 0x6f, 0x74, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63,
	0x69, 0x65, 0x73, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x3c, 0x0a,
	0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x65,
	0x6d, 0x61, 0x69, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69,
	0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72,
	0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x6f, 0x6d, 0x65, 0x70, 0x61, 0x67,
	0x65, 0x55, 0x72, 0x6c, 0x1a, 0x47, 0x0a, 0x0b, 0x47, 0x65, 0x6f, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12,
	0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x09, 0x6c, 0x6f, 0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x1a, 0xe0, 0x01,
	0x0a, 0x0d, 0x48, 0x6f, 0x74, 0x65, 0x6c, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12,
	0x22, 0x0a, 0x0d, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x69, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x6f, 0x75, 0x74,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x63, 0x68, 0x65,
	0x63, 0x6b, 0x4f, 0x75, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x6d, 0x61, 0x78, 0x43, 0x68, 0x69, 0x6c, 0x64, 0x41, 0x67, 0x65, 0x12, 0x61, 0x0a,
	0x15, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73,
	0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x75, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73,
	0x22, 0x3f, 0x0a, 0x09, 0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x64, 0x75, 0x6c, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x61,
	0x64, 0x75, 0x6c, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65,
	0x6e, 0x22, 0xc9, 0x02, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c,
	0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x5c, 0x0a, 0x0c, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x65, 0x78,
	0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67,
	0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x63, 0x61, 0x72, 0x64, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x12, 0x61, 0x0a, 0x15, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75,
	0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x52, 0x14, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x1a, 0x75, 0x0a, 0x0a, 0x43, 0x61, 0x72, 0x64, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x44, 0x0a, 0x09, 0x63, 0x61, 0x72, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x08, 0x63, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x76,
	0x63, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x63, 0x76, 0x63, 0x52, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x69, 0x0a,
	0x05, 0x50, 0x68, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a, 0x05, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x63, 0x79, 0x22, 0xdd, 0x05, 0x0a, 0x08, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6c,
	0x61, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69,
	0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x69,
	0x63, 0x5f, 0x61, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x52, 0x0e, 0x62, 0x61, 0x73, 0x69, 0x63, 0x41, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73,
	0x12, 0x53, 0x0a, 0x0e, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74,
	0x65, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x67, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x62, 0x0a, 0x13, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x31, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x6f, 0x6c, 0x69, 0x63, 0x79, 0x52, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x61, 0x0a, 0x15, 0x75, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74,
	0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61,
	0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x75, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x12, 0x64, 0x0a, 0x11,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x72, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e,
	0x2e, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x10, 0x72, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x1a, 0x51, 0x0a, 0x0f, 0x52, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x5f, 0x6c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x5f, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x73, 0x68, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x19, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x4c, 0x6f, 0x79, 0x61, 0x6c, 0x74, 0x79, 0x4d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x73, 0x68, 0x69, 0x70, 0x22, 0xc9, 0x0a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x61,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x72, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0e,
	0x72, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x6c, 0x61, 0x6e, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x61, 0x74, 0x65, 0x50, 0x6c, 0x61, 0x6e, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x63, 0x0a, 0x19, 0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x5f, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x5f, 0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76,
	0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x17,
	0x6d, 0x61, 0x78, 0x69, 0x6d, 0x75, 0x6d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4f, 0x63,
	0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x12, 0x59, 0x0a, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x74, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72,
	0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72,
	0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x13, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x12, 0x5b, 0x0a, 0x17, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x5f, 0x61, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x14, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x41, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x12,
	0x4f, 0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73,
	0x12, 0x67, 0x0a, 0x12, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x65,
	0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f,
	0x6d, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x11, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x5d, 0x0a, 0x13, 0x75, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x52, 0x12, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72,
	0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x72,
	0x6f, 0x6f, 0x6d, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x72, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xf4, 0x03, 0x0a, 0x08, 0x4c,
	0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x3a, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61,
	0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74,
	0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x51, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x3d, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62,
	0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x52, 0x61, 0x74, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x2e, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x70, 0x61, 0x69, 0x64, 0x5f, 0x61,
	0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0e, 0x70, 0x61, 0x69, 0x64, 0x41, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x6f, 0x75, 0x74,
	0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76,
	0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e,
	0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xde, 0x01, 0x0a, 0x0c, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x00,
	0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x41, 0x58, 0x45,
	0x53, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x41, 0x58, 0x45, 0x53, 0x10, 0x02, 0x12,
	0x11, 0x0a, 0x0d, 0x54, 0x41, 0x58, 0x5f, 0x4d, 0x55, 0x4e, 0x49, 0x43, 0x49, 0x50, 0x41, 0x4c,
	0x10, 0x03, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x41, 0x58, 0x5f, 0x56, 0x41, 0x54, 0x10, 0x04, 0x12,
	0x0d, 0x0a, 0x09, 0x54, 0x41, 0x58, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x46, 0x45, 0x45, 0x53, 0x10, 0x06,
	0x12, 0x0f, 0x0a, 0x0b, 0x46, 0x45, 0x45, 0x5f, 0x42, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x45, 0x45, 0x5f, 0x48, 0x4f, 0x54, 0x45, 0x4c, 0x10, 0x08,
	0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x45, 0x45, 0x5f, 0x52, 0x45, 0x53, 0x4f, 0x52, 0x54, 0x10, 0x09,
	0x12, 0x10, 0x0a, 0x0c, 0x46, 0x45, 0x45, 0x5f, 0x54, 0x52, 0x41, 0x4e, 0x53, 0x46, 0x45, 0x52,
	0x10, 0x0a, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x45, 0x45, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10,
	0x0b, 0x1a, 0x6e, 0x0a, 0x10, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x3e, 0x0a, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x52, 0x07, 0x70, 0x65, 0x6e, 0x61, 0x6c, 0x74,
	0x79, 0x22, 0xa0, 0x08, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x40, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x65, 0x78, 0x74, 0x2e,
	0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70,
	0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x69, 0x73, 0x70, 0x6c, 0x61,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x56, 0x0a, 0x0f, 0x62, 0x61, 0x73, 0x69, 0x63, 0x5f, 0x61, 0x6d,
	0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x41, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x52, 0x0e, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x41, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x55, 0x0a, 0x0e,
	0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65,
	0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0d, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x6d, 0x65, 0x6e, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x65, 0x61,
	0x5f, 0x73, 0x71, 0x5f, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x10, 0x72, 0x6f, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x53, 0x71, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x29, 0x0a, 0x11, 0x72, 0x6f, 0x6f, 0x6d, 0x5f, 0x61, 0x72, 0x65, 0x61, 0x5f,
	0x73, 0x71, 0x5f, 0x66, 0x65, 0x65, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x72,
	0x6f, 0x6f, 0x6d, 0x41, 0x72, 0x65, 0x61, 0x53, 0x71, 0x46, 0x65, 0x65, 0x74, 0x12, 0x3c, 0x0a,
	0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68,
	0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x68, 0x6f, 0x74, 0x6f, 0x73, 0x12, 0x43, 0x0a, 0x08, 0x63,
	0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69,
	0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x08, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x12, 0x4d, 0x0a, 0x09, 0x62, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c,
	0x2e, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6f, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x42, 0x65, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x52, 0x08, 0x62, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x61, 0x0a, 0x15, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x70, 0x6f, 0x6c, 0x69, 0x63, 0x69, 0x65, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f, 0x6b,
	0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x52, 0x14, 0x75, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x69,
	0x65, 0x73, 0x1a, 0xaf, 0x02, 0x0a, 0x08, 0x42, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x65, 0x64, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x42, 0x65, 0x64, 0x73, 0x12, 0x1b,
	0x0a, 0x09, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x65, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x6b, 0x69, 0x6e, 0x67, 0x42, 0x65, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x71,
	0x75, 0x65, 0x65, 0x6e, 0x5f, 0x62, 0x65, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x71, 0x75, 0x65, 0x65, 0x6e, 0x42, 0x65, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x64, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x5f, 0x62, 0x65, 0x64, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x42, 0x65, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x73,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x77, 0x69, 0x6e, 0x5f, 0x62, 0x65,
	0x64, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4f, 0x72, 0x54, 0x77, 0x69, 0x6e, 0x42, 0x65, 0x64, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6d, 0x75,
	0x72, 0x70, 0x68, 0x79, 0x5f, 0x62, 0x65, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0a, 0x6d, 0x75, 0x72, 0x70, 0x68, 0x79, 0x42, 0x65, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x6f, 0x66, 0x61, 0x5f, 0x62, 0x65, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x73, 0x6f, 0x66, 0x61, 0x42, 0x65, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x75, 0x6e, 0x6b,
	0x5f, 0x62, 0x65, 0x64, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x75, 0x6e,
	0x6b, 0x42, 0x65, 0x64, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x62,
	0x65, 0x64, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6f, 0x74, 0x68, 0x65, 0x72,
	0x42, 0x65, 0x64, 0x73, 0x22, 0x96, 0x08, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x4e, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x3a, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e,
	0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x2e, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x9c,
	0x07, 0x0a, 0x0f, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x52,
	0x52, 0x4f, 0x52, 0x10, 0x00, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x50, 0x49, 0x5f, 0x56, 0x45, 0x52,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44,
	0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x48, 0x45, 0x43, 0x4b, 0x49, 0x4e, 0x5f, 0x54, 0x4f,
	0x4f, 0x5f, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0x10, 0x02, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x55, 0x53,
	0x54, 0x4f, 0x4d, 0x45, 0x52, 0x5f, 0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x4c,
	0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x04,
	0x12, 0x15, 0x0a, 0x11, 0x44, 0x55, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x4f,
	0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x48, 0x4f, 0x54, 0x45, 0x4c,
	0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d,
	0x4e, 0x45, 0x54, 0x57, 0x4f, 0x52, 0x4b, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x07, 0x12,
	0x23, 0x0a, 0x1f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x42, 0x49, 0x4c, 0x4c, 0x49,
	0x4e, 0x47, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x08, 0x12, 0x28, 0x0a, 0x24, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f,
	0x43, 0x41, 0x52, 0x44, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x48, 0x4f, 0x4c, 0x44, 0x45, 0x52, 0x5f,
	0x4e, 0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x09, 0x12, 0x1c,
	0x0a, 0x18, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x43,
	0x56, 0x43, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x23, 0x0a, 0x1f,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x5f, 0x45, 0x58, 0x50,
	0x49, 0x52, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x52,
	0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x0c, 0x12, 0x23, 0x0a, 0x1f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41,
	0x52, 0x44, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50,
	0x4f, 0x52, 0x54, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x41, 0x59, 0x4d, 0x45,
	0x4e, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x0e, 0x12, 0x13, 0x0a,
	0x0f, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x10, 0x0f, 0x12, 0x18, 0x0a, 0x14, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x49, 0x4e,
	0x53, 0x55, 0x46, 0x46, 0x49, 0x43, 0x49, 0x45, 0x4e, 0x54, 0x10, 0x10, 0x12, 0x1b, 0x0a, 0x17,
	0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x53, 0x53, 0x4f,
	0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19, 0x50, 0x41, 0x59,
	0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x41, 0x43,
	0x43, 0x45, 0x50, 0x54, 0x45, 0x44, 0x10, 0x12, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x41, 0x54, 0x45,
	0x5f, 0x50, 0x4c, 0x41, 0x4e, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c,
	0x45, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x43, 0x4f, 0x56, 0x45, 0x52, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x14, 0x12, 0x18, 0x0a, 0x14, 0x52, 0x45,
	0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x10, 0x15, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f,
	0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x16, 0x12, 0x18, 0x0a, 0x14,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x53,
	0x41, 0x42, 0x4c, 0x45, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x52,
	0x41, 0x54, 0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x18, 0x12, 0x1c,
	0x0a, 0x18, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x52, 0x49, 0x43,
	0x45, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49,
	0x4c, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x4f, 0x4f, 0x4d, 0x5f,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x55, 0x4e, 0x41, 0x56, 0x41, 0x49, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x10, 0x1b, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x52, 0x41, 0x56, 0x45, 0x4c, 0x45, 0x52, 0x5f, 0x4e,
	0x41, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x1c, 0x12, 0x12, 0x0a,
	0x0e, 0x53, 0x55, 0x50, 0x50, 0x4c, 0x49, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10,
	0x1d, 0x12, 0x1e, 0x0a, 0x1a, 0x4c, 0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10,
	0x1e, 0x12, 0x1f, 0x0a, 0x1b, 0x4c, 0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x49, 0x44, 0x45,
	0x4e, 0x54, 0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x4d, 0x49, 0x53, 0x4d, 0x41, 0x54, 0x43, 0x48,
	0x10, 0x1f, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x4f, 0x59, 0x41, 0x4c, 0x54, 0x59, 0x5f, 0x53, 0x49,
	0x47, 0x4e, 0x55, 0x50, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x20, 0x22, 0x44, 0x0a,
	0x08, 0x54, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x61, 0x6d,
	0x70, 0x61, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x61, 0x6d, 0x70, 0x61, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x6f,
	0x73, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x73,
	0x55, 0x72, 0x6c, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x65, 0x72,
	0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x72, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x61, 0x73, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x09,
	0x6f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x65, 0x78, 0x74, 0x2e, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x2e, 0x62, 0x6f, 0x6f,
	0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x63, 0x63, 0x75, 0x70, 0x61, 0x6e, 0x63, 0x79, 0x52, 0x09, 0x6f, 0x63, 0x63, 0x75, 0x70,
	0x61, 0x6e, 0x63, 0x79, 0x2a, 0x3a, 0x0a, 0x08, 0x43, 0x61, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x06, 0x0a, 0x02, 0x41, 0x58, 0x10, 0x00, 0x12, 0x06, 0x0a, 0x02, 0x44, 0x43, 0x10, 0x01,
	0x12, 0x06, 0x0a, 0x02, 0x44, 0x53, 0x10, 0x02, 0x12, 0x06, 0x0a, 0x02, 0x4a, 0x43, 0x10, 0x03,
	0x12, 0x06, 0x0a, 0x02, 0x4d, 0x43, 0x10, 0x04, 0x12, 0x06, 0x0a, 0x02, 0x56, 0x49, 0x10, 0x05,
	0x2a, 0xae, 0x0a, 0x0a, 0x0f, 0x52, 0x6f, 0x6f, 0x6d, 0x41, 0x6d, 0x65, 0x6e, 0x69, 0x74, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x19, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x41, 0x4d, 0x45, 0x4e, 0x49, 0x54, 0x59, 0x5f, 0x54, 0x59, 0x50,
	0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x41, 0x52, 0x4d, 0x5f, 0x43, 0x4c, 0x4f,
	0x43, 0x4b, 0x10, 0x01, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x48, 0x41, 0x52, 0x47, 0x49, 0x4e, 0x47,
	0x5f, 0x42, 0x45, 0x44, 0x53, 0x49, 0x44, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x10, 0x02,
	0x12, 0x1a, 0x0a, 0x16, 0x48, 0x59, 0x50, 0x4f, 0x41, 0x4c, 0x4c, 0x45, 0x52, 0x47, 0x45, 0x4e,
	0x49, 0x43, 0x5f, 0x42, 0x45, 0x44, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06,
	0x50, 0x49, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x59, 0x4e, 0x54,
	0x48, 0x45, 0x54, 0x49, 0x43, 0x5f, 0x50, 0x49, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x05, 0x12, 0x16,
	0x0a, 0x12, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x5f, 0x46, 0x4f, 0x41, 0x4d, 0x5f, 0x50, 0x49,
	0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x45, 0x41, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x50, 0x49, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f,
	0x4c, 0x4c, 0x5f, 0x41, 0x57, 0x41, 0x59, 0x5f, 0x42, 0x45, 0x44, 0x10, 0x08, 0x12, 0x08, 0x0a,
	0x04, 0x43, 0x52, 0x49, 0x42, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x4b, 0x49, 0x54, 0x43, 0x48,
	0x45, 0x4e, 0x10, 0x0a, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x45, 0x46, 0x52, 0x49, 0x47, 0x45, 0x52,
	0x41, 0x54, 0x4f, 0x52, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x49, 0x53, 0x48, 0x57, 0x41,
	0x53, 0x48, 0x45, 0x52, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x54, 0x4f, 0x56, 0x45, 0x10,
	0x0d, 0x12, 0x08, 0x0a, 0x04, 0x4f, 0x56, 0x45, 0x4e, 0x10, 0x0e, 0x12, 0x0c, 0x0a, 0x08, 0x43,
	0x4f, 0x4f, 0x4b, 0x57, 0x41, 0x52, 0x45, 0x10, 0x0f, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x49, 0x4e,
	0x4b, 0x10, 0x10, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x57, 0x41, 0x56, 0x45,
	0x10, 0x11, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x4f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x10, 0x12, 0x12,
	0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x41, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x4f, 0x56, 0x45, 0x4e, 0x10,
	0x13, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x47, 0x52, 0x49, 0x4c,
	0x4c, 0x10, 0x14, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x47,
	0x52, 0x49, 0x4c, 0x4c, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x49, 0x53, 0x48, 0x45, 0x53,
	0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x55, 0x54, 0x45, 0x4e, 0x53, 0x49, 0x4c, 0x53, 0x10, 0x16, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4f, 0x4f, 0x4b, 0x49, 0x4e, 0x47, 0x5f, 0x55, 0x54, 0x45, 0x4e, 0x53,
	0x49, 0x4c, 0x53, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x4d, 0x45,
	0x4e, 0x54, 0x53, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x41, 0x4e, 0x54, 0x52, 0x59, 0x5f,
	0x53, 0x54, 0x41, 0x50, 0x4c, 0x45, 0x53, 0x10, 0x19, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x49, 0x4e,
	0x49, 0x42, 0x41, 0x52, 0x10, 0x1a, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x4e, 0x41, 0x43, 0x4b, 0x42,
	0x41, 0x52, 0x10, 0x1b, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45, 0x5f, 0x57,
	0x41, 0x54, 0x45, 0x52, 0x10, 0x1c, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4f, 0x54, 0x54, 0x4c, 0x45,
	0x5f, 0x57, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x46, 0x52, 0x45, 0x45, 0x10, 0x1d, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x4f, 0x46, 0x46, 0x45, 0x45, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x52, 0x10, 0x1e, 0x12,
	0x0a, 0x0a, 0x06, 0x4b, 0x45, 0x54, 0x54, 0x4c, 0x45, 0x10, 0x1f, 0x12, 0x0f, 0x0a, 0x0b, 0x54,
	0x45, 0x41, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x20, 0x12, 0x14, 0x0a, 0x10,
	0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x42, 0x41, 0x54, 0x48, 0x52, 0x4f, 0x4f, 0x4d,
	0x10, 0x21, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x4f, 0x49, 0x4c, 0x45, 0x54, 0x10, 0x22, 0x12, 0x09,
	0x0a, 0x05, 0x42, 0x49, 0x44, 0x45, 0x54, 0x10, 0x23, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x48, 0x4f,
	0x57, 0x45, 0x52, 0x10, 0x24, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x48, 0x4f, 0x57, 0x45, 0x52, 0x5f,
	0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42, 0x4c, 0x45, 0x10, 0x25, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x41, 0x54, 0x48, 0x54, 0x55, 0x42, 0x10, 0x26, 0x12, 0x0d, 0x0a, 0x09, 0x48, 0x41, 0x49,
	0x52, 0x44, 0x52, 0x59, 0x45, 0x52, 0x10, 0x27, 0x12, 0x0c, 0x0a, 0x08, 0x42, 0x41, 0x54, 0x48,
	0x52, 0x4f, 0x42, 0x45, 0x10, 0x28, 0x12, 0x1a, 0x0a, 0x16, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54,
	0x45, 0x5f, 0x49, 0x4e, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x54, 0x55, 0x42,
	0x10, 0x29, 0x12, 0x1b, 0x0a, 0x17, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x4f, 0x55,
	0x54, 0x44, 0x4f, 0x4f, 0x52, 0x5f, 0x48, 0x4f, 0x54, 0x5f, 0x54, 0x55, 0x42, 0x10, 0x2a, 0x12,
	0x10, 0x0a, 0x0c, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x50, 0x4f, 0x4f, 0x4c, 0x10,
	0x2b, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x52, 0x49, 0x56, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x41, 0x55,
	0x4e, 0x41, 0x10, 0x2c, 0x12, 0x10, 0x0a, 0x0c, 0x57, 0x41, 0x53, 0x48, 0x45, 0x52, 0x5f, 0x44,
	0x52, 0x59, 0x45, 0x52, 0x10, 0x2d, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x52, 0x4f, 0x4e, 0x49, 0x4e,
	0x47, 0x5f, 0x45, 0x51, 0x55, 0x49, 0x50, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x2e, 0x12, 0x1c, 0x0a,
	0x18, 0x55, 0x4e, 0x49, 0x56, 0x45, 0x52, 0x53, 0x41, 0x4c, 0x5f, 0x50, 0x4f, 0x57, 0x45, 0x52,
	0x5f, 0x41, 0x44, 0x41, 0x50, 0x54, 0x45, 0x52, 0x53, 0x10, 0x2f, 0x12, 0x14, 0x0a, 0x10, 0x41,
	0x49, 0x52, 0x5f, 0x43, 0x4f, 0x4e, 0x44, 0x49, 0x54, 0x49, 0x4f, 0x4e, 0x49, 0x4e, 0x47, 0x10,
	0x30, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x45, 0x41, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x31, 0x12, 0x0d,
	0x0a, 0x09, 0x46, 0x49, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x32, 0x12, 0x06, 0x0a,
	0x02, 0x54, 0x56, 0x10, 0x33, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x56, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x41, 0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x34, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x56,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x49, 0x4e, 0x47, 0x10,
	0x35, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x41, 0x59, 0x5f, 0x50, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x45,
	0x57, 0x5f, 0x4d, 0x4f, 0x56, 0x49, 0x45, 0x53, 0x10, 0x36, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x41,
	0x52, 0x47, 0x45, 0x5f, 0x53, 0x43, 0x52, 0x45, 0x45, 0x4e, 0x5f, 0x54, 0x56, 0x10, 0x37, 0x12,
	0x10, 0x0a, 0x0c, 0x49, 0x4e, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x53, 0x41, 0x46, 0x45, 0x10,
	0x38, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x4f, 0x4e, 0x49, 0x43, 0x5f,
	0x52, 0x4f, 0x4f, 0x4d, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x39, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x45,
	0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x4c, 0x4f, 0x43, 0x4b, 0x5f, 0x4f, 0x4e, 0x5f, 0x47, 0x55, 0x45,
	0x53, 0x54, 0x5f, 0x44, 0x4f, 0x4f, 0x52, 0x53, 0x10, 0x3a, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x4d,
	0x4f, 0x4b, 0x45, 0x5f, 0x44, 0x45, 0x54, 0x45, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x49, 0x4e, 0x5f,
	0x47, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x53, 0x10, 0x3b, 0x12, 0x16, 0x0a,
	0x12, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x45, 0x58, 0x54, 0x49, 0x4e, 0x47, 0x55, 0x49, 0x53, 0x48,
	0x45, 0x52, 0x53, 0x10, 0x3c, 0x12, 0x17, 0x0a, 0x13, 0x45, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x4e,
	0x43, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x54, 0x5f, 0x4d, 0x41, 0x50, 0x53, 0x10, 0x3d, 0x12, 0x0a,
	0x0a, 0x06, 0x53, 0x54, 0x41, 0x49, 0x52, 0x53, 0x10, 0x3e, 0x12, 0x08, 0x0a, 0x04, 0x4c, 0x4f,
	0x46, 0x54, 0x10, 0x3f, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53, 0x49, 0x42,
	0x4c, 0x45, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10, 0x40, 0x12, 0x16, 0x0a, 0x12, 0x41, 0x44, 0x41,
	0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x49, 0x41, 0x4e, 0x54, 0x5f, 0x52, 0x4f, 0x4f, 0x4d, 0x10,
	0x41, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x4f, 0x4e, 0x5f, 0x53, 0x4d, 0x4f, 0x4b, 0x49, 0x4e, 0x47,
	0x10, 0x42, 0x12, 0x15, 0x0a, 0x11, 0x57, 0x49, 0x4e, 0x44, 0x4f, 0x57, 0x53, 0x5f, 0x54, 0x48,
	0x41, 0x54, 0x5f, 0x4f, 0x50, 0x45, 0x4e, 0x10, 0x43, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x54,
	0x49, 0x4f, 0x10, 0x44, 0x12, 0x0b, 0x0a, 0x07, 0x42, 0x41, 0x4c, 0x43, 0x4f, 0x4e, 0x59, 0x10,
	0x45, 0x2a, 0x4f, 0x0a, 0x0d, 0x47, 0x75, 0x61, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x1a, 0x0a, 0x16, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x47, 0x55,
	0x41, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x41, 0x59, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x43, 0x41, 0x52, 0x44, 0x10, 0x01,
	0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x4f, 0x5f, 0x47, 0x55, 0x41, 0x52, 0x41, 0x4e, 0x54, 0x45, 0x45,
	0x10, 0x02, 0x42, 0x34, 0x5a, 0x32, 0x2e, 0x3b, 0x63, 0x6f, 0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x74, 0x72, 0x61, 0x76, 0x65, 0x6c, 0x5f, 0x62, 0x6f, 0x6f, 0x6b, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x6e, 0x65, 0x72, 0x73, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x61, 0x70, 0x69, 0x5f, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_v1_proto_rawDescOnce sync.Once
	file_v1_proto_rawDescData = file_v1_proto_rawDesc
)

func file_v1_proto_rawDescGZIP() []byte {
	file_v1_proto_rawDescOnce.Do(func() {
		file_v1_proto_rawDescData = protoimpl.X.CompressGZIP(file_v1_proto_rawDescData)
	})
	return file_v1_proto_rawDescData
}

var file_v1_proto_enumTypes = make([]protoimpl.EnumInfo, 9)
var file_v1_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_v1_proto_goTypes = []interface{}{
	(CardType)(0),        // 0: ext.travel.booking.partner.v1.CardType
	(RoomAmenityType)(0), // 1: ext.travel.booking.partner.v1.RoomAmenityType
	(GuaranteeType)(0),   // 2: ext.travel.booking.partner.v1.GuaranteeType
	(BookingAvailabilityRequest_DeviceType)(0),   // 3: ext.travel.booking.partner.v1.BookingAvailabilityRequest.DeviceType
	(BookingSubmitResponse_Status)(0),            // 4: ext.travel.booking.partner.v1.BookingSubmitResponse.Status
	(AvailabilityError_AvailabilityErrorType)(0), // 5: ext.travel.booking.partner.v1.AvailabilityError.AvailabilityErrorType
	(CancellationPolicy_CancellationSummary)(0),  // 6: ext.travel.booking.partner.v1.CancellationPolicy.CancellationSummary
	(RoomRate_LineItem_LineItemType)(0),          // 7: ext.travel.booking.partner.v1.RoomRate.LineItem.LineItemType
	(SubmitError_SubmitErrorType)(0),             // 8: ext.travel.booking.partner.v1.SubmitError.SubmitErrorType
	(*BookingAvailabilityRequest)(nil),           // 9: ext.travel.booking.partner.v1.BookingAvailabilityRequest
	(*BookingAvailabilityResponse)(nil),          // 10: ext.travel.booking.partner.v1.BookingAvailabilityResponse
	(*BookingSubmitRequest)(nil),                 // 11: ext.travel.booking.partner.v1.BookingSubmitRequest
	(*BookingSubmitResponse)(nil),                // 12: ext.travel.booking.partner.v1.BookingSubmitResponse
	(*AvailabilityError)(nil),                    // 13: ext.travel.booking.partner.v1.AvailabilityError
	(*Address)(nil),                              // 14: ext.travel.booking.partner.v1.Address
	(*BasicAmenities)(nil),                       // 15: ext.travel.booking.partner.v1.BasicAmenities
	(*CancellationPolicy)(nil),                   // 16: ext.travel.booking.partner.v1.CancellationPolicy
	(*Capacity)(nil),                             // 17: ext.travel.booking.partner.v1.Capacity
	(*Customer)(nil),                             // 18: ext.travel.booking.partner.v1.Customer
	(*DisplayString)(nil),                        // 19: ext.travel.booking.partner.v1.DisplayString
	(*HotelDetails)(nil),                         // 20: ext.travel.booking.partner.v1.HotelDetails
	(*Occupancy)(nil),                            // 21: ext.travel.booking.partner.v1.Occupancy
	(*PartnerPolicies)(nil),                      // 22: ext.travel.booking.partner.v1.PartnerPolicies
	(*Photo)(nil),                                // 23: ext.travel.booking.partner.v1.Photo
	(*Price)(nil),                                // 24: ext.travel.booking.partner.v1.Price
	(*RatePlan)(nil),                             // 25: ext.travel.booking.partner.v1.RatePlan
	(*RoomRate)(nil),                             // 26: ext.travel.booking.partner.v1.RoomRate
	(*RoomType)(nil),                             // 27: ext.travel.booking.partner.v1.RoomType
	(*SubmitError)(nil),                          // 28: ext.travel.booking.partner.v1.SubmitError
	(*Tracking)(nil),                             // 29: ext.travel.booking.partner.v1.Tracking
	(*Traveler)(nil),                             // 30: ext.travel.booking.partner.v1.Traveler
	(*BookingSubmitRequest_Payment)(nil),         // 31: ext.travel.booking.partner.v1.BookingSubmitRequest.Payment
	(*BookingSubmitRequest_Payment_PaymentCardParameters)(nil), // 32: ext.travel.booking.partner.v1.BookingSubmitRequest.Payment.PaymentCardParameters
	(*BookingSubmitResponse_Reservation)(nil),                  // 33: ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation
	(*BookingSubmitResponse_Reservation_Locator)(nil),          // 34: ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation.Locator
	(*HotelDetails_Geolocation)(nil),                           // 35: ext.travel.booking.partner.v1.HotelDetails.Geolocation
	(*HotelDetails_HotelPolicies)(nil),                         // 36: ext.travel.booking.partner.v1.HotelDetails.HotelPolicies
	(*PartnerPolicies_CardOption)(nil),                         // 37: ext.travel.booking.partner.v1.PartnerPolicies.CardOption
	(*RatePlan_RateRestriction)(nil),                           // 38: ext.travel.booking.partner.v1.RatePlan.RateRestriction
	(*RoomRate_LineItem)(nil),                                  // 39: ext.travel.booking.partner.v1.RoomRate.LineItem
	(*RoomRate_CancellationRule)(nil),                          // 40: ext.travel.booking.partner.v1.RoomRate.CancellationRule
	(*RoomType_BedTypes)(nil),                                  // 41: ext.travel.booking.partner.v1.RoomType.BedTypes
}
var file_v1_proto_depIdxs = []int32{
	29, // 0: ext.travel.booking.partner.v1.BookingAvailabilityRequest.tracking:type_name -> ext.travel.booking.partner.v1.Tracking
	21, // 1: ext.travel.booking.partner.v1.BookingAvailabilityRequest.party:type_name -> ext.travel.booking.partner.v1.Occupancy
	3,  // 2: ext.travel.booking.partner.v1.BookingAvailabilityRequest.device_type:type_name -> ext.travel.booking.partner.v1.BookingAvailabilityRequest.DeviceType
	21, // 3: ext.travel.booking.partner.v1.BookingAvailabilityResponse.party:type_name -> ext.travel.booking.partner.v1.Occupancy
	27, // 4: ext.travel.booking.partner.v1.BookingAvailabilityResponse.room_types:type_name -> ext.travel.booking.partner.v1.RoomType
	25, // 5: ext.travel.booking.partner.v1.BookingAvailabilityResponse.rate_plans:type_name -> ext.travel.booking.partner.v1.RatePlan
	26, // 6: ext.travel.booking.partner.v1.BookingAvailabilityResponse.room_rates:type_name -> ext.travel.booking.partner.v1.RoomRate
	20, // 7: ext.travel.booking.partner.v1.BookingAvailabilityResponse.hotel_details:type_name -> ext.travel.booking.partner.v1.HotelDetails
	22, // 8: ext.travel.booking.partner.v1.BookingAvailabilityResponse.policies:type_name -> ext.travel.booking.partner.v1.PartnerPolicies
	13, // 9: ext.travel.booking.partner.v1.BookingAvailabilityResponse.error:type_name -> ext.travel.booking.partner.v1.AvailabilityError
	29, // 10: ext.travel.booking.partner.v1.BookingSubmitRequest.tracking:type_name -> ext.travel.booking.partner.v1.Tracking
	18, // 11: ext.travel.booking.partner.v1.BookingSubmitRequest.customer:type_name -> ext.travel.booking.partner.v1.Customer
	30, // 12: ext.travel.booking.partner.v1.BookingSubmitRequest.traveler:type_name -> ext.travel.booking.partner.v1.Traveler
	26, // 13: ext.travel.booking.partner.v1.BookingSubmitRequest.room_rate:type_name -> ext.travel.booking.partner.v1.RoomRate
	31, // 14: ext.travel.booking.partner.v1.BookingSubmitRequest.payment:type_name -> ext.travel.booking.partner.v1.BookingSubmitRequest.Payment
	4,  // 15: ext.travel.booking.partner.v1.BookingSubmitResponse.status:type_name -> ext.travel.booking.partner.v1.BookingSubmitResponse.Status
	33, // 16: ext.travel.booking.partner.v1.BookingSubmitResponse.reservation:type_name -> ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation
	28, // 17: ext.travel.booking.partner.v1.BookingSubmitResponse.error:type_name -> ext.travel.booking.partner.v1.SubmitError
	5,  // 18: ext.travel.booking.partner.v1.AvailabilityError.type:type_name -> ext.travel.booking.partner.v1.AvailabilityError.AvailabilityErrorType
	6,  // 19: ext.travel.booking.partner.v1.CancellationPolicy.summary:type_name -> ext.travel.booking.partner.v1.CancellationPolicy.CancellationSummary
	19, // 20: ext.travel.booking.partner.v1.CancellationPolicy.unstructured_policy:type_name -> ext.travel.booking.partner.v1.DisplayString
	14, // 21: ext.travel.booking.partner.v1.HotelDetails.address:type_name -> ext.travel.booking.partner.v1.Address
	35, // 22: ext.travel.booking.partner.v1.HotelDetails.geolocation:type_name -> ext.travel.booking.partner.v1.HotelDetails.Geolocation
	36, // 23: ext.travel.booking.partner.v1.HotelDetails.policies:type_name -> ext.travel.booking.partner.v1.HotelDetails.HotelPolicies
	23, // 24: ext.travel.booking.partner.v1.HotelDetails.photos:type_name -> ext.travel.booking.partner.v1.Photo
	37, // 25: ext.travel.booking.partner.v1.PartnerPolicies.card_options:type_name -> ext.travel.booking.partner.v1.PartnerPolicies.CardOption
	19, // 26: ext.travel.booking.partner.v1.PartnerPolicies.unstructured_policies:type_name -> ext.travel.booking.partner.v1.DisplayString
	19, // 27: ext.travel.booking.partner.v1.Photo.description:type_name -> ext.travel.booking.partner.v1.DisplayString
	19, // 28: ext.travel.booking.partner.v1.RatePlan.name:type_name -> ext.travel.booking.partner.v1.DisplayString
	19, // 29: ext.travel.booking.partner.v1.RatePlan.description:type_name -> ext.travel.booking.partner.v1.DisplayString
	15, // 30: ext.travel.booking.partner.v1.RatePlan.basic_amenities:type_name -> ext.travel.booking.partner.v1.BasicAmenities
	2,  // 31: ext.travel.booking.partner.v1.RatePlan.guarantee_type:type_name -> ext.travel.booking.partner.v1.GuaranteeType
	16, // 32: ext.travel.booking.partner.v1.RatePlan.cancellation_policy:type_name -> ext.travel.booking.partner.v1.CancellationPolicy
	19, // 33: ext.travel.booking.partner.v1.RatePlan.unstructured_policies:type_name -> ext.travel.booking.partner.v1.DisplayString
	38, // 34: ext.travel.booking.partner.v1.RatePlan.rate_restrictions:type_name -> ext.travel.booking.partner.v1.RatePlan.RateRestriction
	17, // 35: ext.travel.booking.partner.v1.RoomRate.maximum_allowed_occupancy:type_name -> ext.travel.booking.partner.v1.Capacity
	24, // 36: ext.travel.booking.partner.v1.RoomRate.total_price_at_booking:type_name -> ext.travel.booking.partner.v1.Price
	24, // 37: ext.travel.booking.partner.v1.RoomRate.total_price_at_checkout:type_name -> ext.travel.booking.partner.v1.Price
	39, // 38: ext.travel.booking.partner.v1.RoomRate.line_items:type_name -> ext.travel.booking.partner.v1.RoomRate.LineItem
	40, // 39: ext.travel.booking.partner.v1.RoomRate.cancellation_rules:type_name -> ext.travel.booking.partner.v1.RoomRate.CancellationRule
	19, // 40: ext.travel.booking.partner.v1.RoomRate.unstructured_policy:type_name -> ext.travel.booking.partner.v1.DisplayString
	19, // 41: ext.travel.booking.partner.v1.RoomType.name:type_name -> ext.travel.booking.partner.v1.DisplayString
	19, // 42: ext.travel.booking.partner.v1.RoomType.description:type_name -> ext.travel.booking.partner.v1.DisplayString
	15, // 43: ext.travel.booking.partner.v1.RoomType.basic_amenities:type_name -> ext.travel.booking.partner.v1.BasicAmenities
	1,  // 44: ext.travel.booking.partner.v1.RoomType.room_amenities:type_name -> ext.travel.booking.partner.v1.RoomAmenityType
	23, // 45: ext.travel.booking.partner.v1.RoomType.photos:type_name -> ext.travel.booking.partner.v1.Photo
	17, // 46: ext.travel.booking.partner.v1.RoomType.capacity:type_name -> ext.travel.booking.partner.v1.Capacity
	41, // 47: ext.travel.booking.partner.v1.RoomType.bed_types:type_name -> ext.travel.booking.partner.v1.RoomType.BedTypes
	19, // 48: ext.travel.booking.partner.v1.RoomType.unstructured_policies:type_name -> ext.travel.booking.partner.v1.DisplayString
	8,  // 49: ext.travel.booking.partner.v1.SubmitError.type:type_name -> ext.travel.booking.partner.v1.SubmitError.SubmitErrorType
	21, // 50: ext.travel.booking.partner.v1.Traveler.occupancy:type_name -> ext.travel.booking.partner.v1.Occupancy
	2,  // 51: ext.travel.booking.partner.v1.BookingSubmitRequest.Payment.type:type_name -> ext.travel.booking.partner.v1.GuaranteeType
	32, // 52: ext.travel.booking.partner.v1.BookingSubmitRequest.Payment.payment_card_parameters:type_name -> ext.travel.booking.partner.v1.BookingSubmitRequest.Payment.PaymentCardParameters
	14, // 53: ext.travel.booking.partner.v1.BookingSubmitRequest.Payment.billing_address:type_name -> ext.travel.booking.partner.v1.Address
	0,  // 54: ext.travel.booking.partner.v1.BookingSubmitRequest.Payment.PaymentCardParameters.card_type:type_name -> ext.travel.booking.partner.v1.CardType
	34, // 55: ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation.locator:type_name -> ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation.Locator
	34, // 56: ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation.hotel_locators:type_name -> ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation.Locator
	18, // 57: ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation.customer:type_name -> ext.travel.booking.partner.v1.Customer
	30, // 58: ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation.traveler:type_name -> ext.travel.booking.partner.v1.Traveler
	26, // 59: ext.travel.booking.partner.v1.BookingSubmitResponse.Reservation.room_rate:type_name -> ext.travel.booking.partner.v1.RoomRate
	19, // 60: ext.travel.booking.partner.v1.HotelDetails.HotelPolicies.unstructured_policies:type_name -> ext.travel.booking.partner.v1.DisplayString
	0,  // 61: ext.travel.booking.partner.v1.PartnerPolicies.CardOption.card_type:type_name -> ext.travel.booking.partner.v1.CardType
	24, // 62: ext.travel.booking.partner.v1.RoomRate.LineItem.price:type_name -> ext.travel.booking.partner.v1.Price
	7,  // 63: ext.travel.booking.partner.v1.RoomRate.LineItem.type:type_name -> ext.travel.booking.partner.v1.RoomRate.LineItem.LineItemType
	19, // 64: ext.travel.booking.partner.v1.RoomRate.LineItem.description:type_name -> ext.travel.booking.partner.v1.DisplayString
	24, // 65: ext.travel.booking.partner.v1.RoomRate.CancellationRule.penalty:type_name -> ext.travel.booking.partner.v1.Price
	66, // [66:66] is the sub-list for method output_type
	66, // [66:66] is the sub-list for method input_type
	66, // [66:66] is the sub-list for extension type_name
	66, // [66:66] is the sub-list for extension extendee
	0,  // [0:66] is the sub-list for field type_name
}

func init() { file_v1_proto_init() }
func file_v1_proto_init() {
	if File_v1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_v1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingAvailabilityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingAvailabilityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingSubmitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingSubmitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AvailabilityError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Address); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicAmenities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CancellationPolicy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Capacity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Customer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DisplayString); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotelDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Occupancy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Photo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Price); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatePlan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tracking); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Traveler); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingSubmitRequest_Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingSubmitRequest_Payment_PaymentCardParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingSubmitResponse_Reservation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BookingSubmitResponse_Reservation_Locator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotelDetails_Geolocation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HotelDetails_HotelPolicies); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartnerPolicies_CardOption); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RatePlan_RateRestriction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomRate_LineItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomRate_CancellationRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_v1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoomType_BedTypes); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_v1_proto_rawDesc,
			NumEnums:      9,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_proto_goTypes,
		DependencyIndexes: file_v1_proto_depIdxs,
		EnumInfos:         file_v1_proto_enumTypes,
		MessageInfos:      file_v1_proto_msgTypes,
	}.Build()
	File_v1_proto = out.File
	file_v1_proto_rawDesc = nil
	file_v1_proto_goTypes = nil
	file_v1_proto_depIdxs = nil
}
